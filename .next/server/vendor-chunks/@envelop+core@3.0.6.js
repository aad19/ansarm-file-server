"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@envelop+core@3.0.6";
exports.ids = ["vendor-chunks/@envelop+core@3.0.6"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/create.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/create.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   envelop: () => (/* binding */ envelop)\n/* harmony export */ });\n/* harmony import */ var _orchestrator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./orchestrator.js */ \"(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/orchestrator.js\");\n\nfunction notEmpty(value) {\n    return value != null;\n}\nfunction envelop(options) {\n    const plugins = options.plugins.filter(notEmpty);\n    const orchestrator = (0,_orchestrator_js__WEBPACK_IMPORTED_MODULE_0__.createEnvelopOrchestrator)({\n        plugins,\n    });\n    const getEnveloped = (initialContext = {}) => {\n        const typedOrchestrator = orchestrator;\n        typedOrchestrator.init(initialContext);\n        return {\n            parse: typedOrchestrator.parse(initialContext),\n            validate: typedOrchestrator.validate(initialContext),\n            contextFactory: typedOrchestrator.contextFactory(initialContext),\n            execute: typedOrchestrator.execute,\n            subscribe: typedOrchestrator.subscribe,\n            schema: typedOrchestrator.getCurrentSchema(),\n        };\n    };\n    getEnveloped._plugins = plugins;\n    return getEnveloped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVudmVsb3ArY29yZUAzLjAuNi9ub2RlX21vZHVsZXMvQGVudmVsb3AvY29yZS9lc20vY3JlYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThEO0FBQzlEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx5QkFBeUIsMkVBQXlCO0FBQ2xEO0FBQ0EsS0FBSztBQUNMLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9hZDE5L0RvY3VtZW50cy9hbnNhcm0tZmlsZS1zZXJ2ZXIvbm9kZV9tb2R1bGVzLy5wbnBtL0BlbnZlbG9wK2NvcmVAMy4wLjYvbm9kZV9tb2R1bGVzL0BlbnZlbG9wL2NvcmUvZXNtL2NyZWF0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVFbnZlbG9wT3JjaGVzdHJhdG9yIH0gZnJvbSAnLi9vcmNoZXN0cmF0b3IuanMnO1xuZnVuY3Rpb24gbm90RW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbnZlbG9wKG9wdGlvbnMpIHtcbiAgICBjb25zdCBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zLmZpbHRlcihub3RFbXB0eSk7XG4gICAgY29uc3Qgb3JjaGVzdHJhdG9yID0gY3JlYXRlRW52ZWxvcE9yY2hlc3RyYXRvcih7XG4gICAgICAgIHBsdWdpbnMsXG4gICAgfSk7XG4gICAgY29uc3QgZ2V0RW52ZWxvcGVkID0gKGluaXRpYWxDb250ZXh0ID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgdHlwZWRPcmNoZXN0cmF0b3IgPSBvcmNoZXN0cmF0b3I7XG4gICAgICAgIHR5cGVkT3JjaGVzdHJhdG9yLmluaXQoaW5pdGlhbENvbnRleHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFyc2U6IHR5cGVkT3JjaGVzdHJhdG9yLnBhcnNlKGluaXRpYWxDb250ZXh0KSxcbiAgICAgICAgICAgIHZhbGlkYXRlOiB0eXBlZE9yY2hlc3RyYXRvci52YWxpZGF0ZShpbml0aWFsQ29udGV4dCksXG4gICAgICAgICAgICBjb250ZXh0RmFjdG9yeTogdHlwZWRPcmNoZXN0cmF0b3IuY29udGV4dEZhY3RvcnkoaW5pdGlhbENvbnRleHQpLFxuICAgICAgICAgICAgZXhlY3V0ZTogdHlwZWRPcmNoZXN0cmF0b3IuZXhlY3V0ZSxcbiAgICAgICAgICAgIHN1YnNjcmliZTogdHlwZWRPcmNoZXN0cmF0b3Iuc3Vic2NyaWJlLFxuICAgICAgICAgICAgc2NoZW1hOiB0eXBlZE9yY2hlc3RyYXRvci5nZXRDdXJyZW50U2NoZW1hKCksXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBnZXRFbnZlbG9wZWQuX3BsdWdpbnMgPSBwbHVnaW5zO1xuICAgIHJldHVybiBnZXRFbnZlbG9wZWQ7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/create.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/orchestrator.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/orchestrator.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEnvelopOrchestrator: () => (/* binding */ createEnvelopOrchestrator)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/utils.js\");\n\nfunction throwEngineFunctionError(name) {\n    throw Error(`No \\`${name}\\` function found! Register it using \"useEngine\" plugin.`);\n}\nfunction createEnvelopOrchestrator({ plugins, }) {\n    let schema = null;\n    let initDone = false;\n    const parse = () => throwEngineFunctionError('parse');\n    const validate = () => throwEngineFunctionError('validate');\n    const execute = () => throwEngineFunctionError('execute');\n    const subscribe = () => throwEngineFunctionError('subscribe');\n    // Define the initial method for replacing the GraphQL schema, this is needed in order\n    // to allow setting the schema from the onPluginInit callback. We also need to make sure\n    // here not to call the same plugin that initiated the schema switch.\n    const replaceSchema = (newSchema, ignorePluginIndex = -1) => {\n        schema = newSchema;\n        if (initDone) {\n            for (const [i, plugin] of plugins.entries()) {\n                if (i !== ignorePluginIndex) {\n                    plugin.onSchemaChange &&\n                        plugin.onSchemaChange({\n                            schema,\n                            replaceSchema: schemaToSet => {\n                                replaceSchema(schemaToSet, i);\n                            },\n                        });\n                }\n            }\n        }\n    };\n    const contextErrorHandlers = [];\n    // Iterate all plugins and trigger onPluginInit\n    for (const [i, plugin] of plugins.entries()) {\n        plugin.onPluginInit &&\n            plugin.onPluginInit({\n                plugins,\n                addPlugin: newPlugin => {\n                    plugins.push(newPlugin);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n                registerContextErrorHandler: handler => contextErrorHandlers.push(handler),\n            });\n    }\n    // A set of before callbacks defined here in order to allow it to be used later\n    const beforeCallbacks = {\n        init: [],\n        parse: [],\n        validate: [],\n        subscribe: [],\n        execute: [],\n        context: [],\n    };\n    for (const { onContextBuilding, onExecute, onParse, onSubscribe, onValidate, onEnveloped } of plugins) {\n        onEnveloped && beforeCallbacks.init.push(onEnveloped);\n        onContextBuilding && beforeCallbacks.context.push(onContextBuilding);\n        onExecute && beforeCallbacks.execute.push(onExecute);\n        onParse && beforeCallbacks.parse.push(onParse);\n        onSubscribe && beforeCallbacks.subscribe.push(onSubscribe);\n        onValidate && beforeCallbacks.validate.push(onValidate);\n    }\n    const init = initialContext => {\n        for (const [i, onEnveloped] of beforeCallbacks.init.entries()) {\n            onEnveloped({\n                context: initialContext,\n                extendContext: extension => {\n                    if (!initialContext) {\n                        return;\n                    }\n                    Object.assign(initialContext, extension);\n                },\n                setSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n            });\n        }\n    };\n    const customParse = beforeCallbacks.parse.length\n        ? initialContext => (source, parseOptions) => {\n            let result = null;\n            let parseFn = parse;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onParse of beforeCallbacks.parse) {\n                const afterFn = onParse({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: { source, options: parseOptions },\n                    parseFn,\n                    setParseFn: newFn => {\n                        parseFn = newFn;\n                    },\n                    setParsedDocument: newDoc => {\n                        result = newDoc;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (result === null) {\n                try {\n                    result = parseFn(source, parseOptions);\n                }\n                catch (e) {\n                    result = e;\n                }\n            }\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    replaceParseResult: newResult => {\n                        result = newResult;\n                    },\n                    result,\n                });\n            }\n            if (result === null) {\n                throw new Error(`Failed to parse document.`);\n            }\n            if (result instanceof Error) {\n                throw result;\n            }\n            return result;\n        }\n        : () => parse;\n    const customValidate = beforeCallbacks.validate.length\n        ? initialContext => (schema, documentAST, rules, typeInfo, validationOptions) => {\n            let actualRules = rules ? [...rules] : undefined;\n            let validateFn = validate;\n            let result = null;\n            const context = initialContext;\n            const afterCalls = [];\n            for (const onValidate of beforeCallbacks.validate) {\n                const afterFn = onValidate({\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    params: {\n                        schema,\n                        documentAST,\n                        rules: actualRules,\n                        typeInfo,\n                        options: validationOptions,\n                    },\n                    validateFn,\n                    addValidationRule: rule => {\n                        if (!actualRules) {\n                            actualRules = [];\n                        }\n                        actualRules.push(rule);\n                    },\n                    setValidationFn: newFn => {\n                        validateFn = newFn;\n                    },\n                    setResult: newResults => {\n                        result = newResults;\n                    },\n                });\n                afterFn && afterCalls.push(afterFn);\n            }\n            if (!result) {\n                result = validateFn(schema, documentAST, actualRules, typeInfo, validationOptions);\n            }\n            if (!result) {\n                return;\n            }\n            const valid = result.length === 0;\n            for (const afterCb of afterCalls) {\n                afterCb({\n                    valid,\n                    result,\n                    context,\n                    extendContext: extension => {\n                        Object.assign(context, extension);\n                    },\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n            }\n            return result;\n        }\n        : () => validate;\n    const customContextFactory = beforeCallbacks.context\n        .length\n        ? initialContext => async (orchestratorCtx) => {\n            const afterCalls = [];\n            // In order to have access to the \"last working\" context object we keep this outside of the try block:\n            let context = orchestratorCtx ? { ...initialContext, ...orchestratorCtx } : initialContext;\n            try {\n                let isBreakingContextBuilding = false;\n                for (const onContext of beforeCallbacks.context) {\n                    const afterHookResult = await onContext({\n                        context,\n                        extendContext: extension => {\n                            context = { ...context, ...extension };\n                        },\n                        breakContextBuilding: () => {\n                            isBreakingContextBuilding = true;\n                        },\n                    });\n                    if (typeof afterHookResult === 'function') {\n                        afterCalls.push(afterHookResult);\n                    }\n                    if (isBreakingContextBuilding === true) {\n                        break;\n                    }\n                }\n                for (const afterCb of afterCalls) {\n                    afterCb({\n                        context,\n                        extendContext: extension => {\n                            context = { ...context, ...extension };\n                        },\n                    });\n                }\n                return context;\n            }\n            catch (err) {\n                let error = err;\n                for (const errorCb of contextErrorHandlers) {\n                    errorCb({\n                        context,\n                        error,\n                        setError: err => {\n                            error = err;\n                        },\n                    });\n                }\n                throw error;\n            }\n        }\n        : initialContext => orchestratorCtx => orchestratorCtx ? { ...initialContext, ...orchestratorCtx } : initialContext;\n    const useCustomSubscribe = beforeCallbacks.subscribe.length;\n    const customSubscribe = useCustomSubscribe\n        ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makeSubscribe)(async (args) => {\n            let subscribeFn = subscribe;\n            const afterCalls = [];\n            const subscribeErrorHandlers = [];\n            let context = args.contextValue || {};\n            let result;\n            for (const onSubscribe of beforeCallbacks.subscribe) {\n                const after = await onSubscribe({\n                    subscribeFn,\n                    setSubscribeFn: newSubscribeFn => {\n                        subscribeFn = newSubscribeFn;\n                    },\n                    extendContext: extension => {\n                        context = { ...context, ...extension };\n                    },\n                    args: args,\n                    setResultAndStopExecution: stopResult => {\n                        result = stopResult;\n                    },\n                });\n                if (after) {\n                    if (after.onSubscribeResult) {\n                        afterCalls.push(after.onSubscribeResult);\n                    }\n                    if (after.onSubscribeError) {\n                        subscribeErrorHandlers.push(after.onSubscribeError);\n                    }\n                }\n                if (result !== undefined) {\n                    break;\n                }\n            }\n            if (result === undefined) {\n                result = await subscribeFn({\n                    ...args,\n                    contextValue: context,\n                    // Casted for GraphQL.js 15 compatibility\n                    // Can be removed once we drop support for GraphQL.js 15\n                });\n            }\n            if (!result) {\n                return;\n            }\n            const onNextHandler = [];\n            const onEndHandler = [];\n            for (const afterCb of afterCalls) {\n                const hookResult = afterCb({\n                    args: args,\n                    result,\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n                if (hookResult) {\n                    if (hookResult.onNext) {\n                        onNextHandler.push(hookResult.onNext);\n                    }\n                    if (hookResult.onEnd) {\n                        onEndHandler.push(hookResult.onEnd);\n                    }\n                }\n            }\n            if (onNextHandler.length && (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result)) {\n                result = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapAsyncIterator)(result, async (result) => {\n                    for (const onNext of onNextHandler) {\n                        await onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => (result = newResult),\n                        });\n                    }\n                    return result;\n                });\n            }\n            if (onEndHandler.length && (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result)) {\n                result = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.finalAsyncIterator)(result, () => {\n                    for (const onEnd of onEndHandler) {\n                        onEnd();\n                    }\n                });\n            }\n            if (subscribeErrorHandlers.length && (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result)) {\n                result = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.errorAsyncIterator)(result, err => {\n                    let error = err;\n                    for (const handler of subscribeErrorHandlers) {\n                        handler({\n                            error,\n                            setError: err => {\n                                error = err;\n                            },\n                        });\n                    }\n                    throw error;\n                });\n            }\n            return result;\n        })\n        : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makeSubscribe)(subscribe);\n    const useCustomExecute = beforeCallbacks.execute.length;\n    const customExecute = useCustomExecute\n        ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makeExecute)(async (args) => {\n            let executeFn = execute;\n            let result;\n            const afterCalls = [];\n            let context = args.contextValue || {};\n            for (const onExecute of beforeCallbacks.execute) {\n                const after = await onExecute({\n                    executeFn,\n                    setExecuteFn: newExecuteFn => {\n                        executeFn = newExecuteFn;\n                    },\n                    setResultAndStopExecution: stopResult => {\n                        result = stopResult;\n                    },\n                    extendContext: extension => {\n                        if (typeof extension === 'object') {\n                            context = {\n                                ...context,\n                                ...extension,\n                            };\n                        }\n                        else {\n                            throw new Error(`Invalid context extension provided! Expected \"object\", got: \"${JSON.stringify(extension)}\" (${typeof extension})`);\n                        }\n                    },\n                    args: args,\n                });\n                if (after?.onExecuteDone) {\n                    afterCalls.push(after.onExecuteDone);\n                }\n                if (result !== undefined) {\n                    break;\n                }\n            }\n            if (result === undefined) {\n                result = (await executeFn({\n                    ...args,\n                    contextValue: context,\n                }));\n            }\n            const onNextHandler = [];\n            const onEndHandler = [];\n            for (const afterCb of afterCalls) {\n                const hookResult = await afterCb({\n                    args: args,\n                    result,\n                    setResult: newResult => {\n                        result = newResult;\n                    },\n                });\n                if (hookResult) {\n                    if (hookResult.onNext) {\n                        onNextHandler.push(hookResult.onNext);\n                    }\n                    if (hookResult.onEnd) {\n                        onEndHandler.push(hookResult.onEnd);\n                    }\n                }\n            }\n            if (onNextHandler.length && (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result)) {\n                result = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapAsyncIterator)(result, async (result) => {\n                    for (const onNext of onNextHandler) {\n                        await onNext({\n                            args: args,\n                            result,\n                            setResult: newResult => {\n                                result = newResult;\n                            },\n                        });\n                    }\n                    return result;\n                });\n            }\n            if (onEndHandler.length && (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result)) {\n                result = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.finalAsyncIterator)(result, () => {\n                    for (const onEnd of onEndHandler) {\n                        onEnd();\n                    }\n                });\n            }\n            return result;\n        })\n        : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makeExecute)(execute);\n    initDone = true;\n    // This is done in order to trigger the first schema available, to allow plugins that needs the schema\n    // eagerly to have it.\n    if (schema) {\n        for (const [i, plugin] of plugins.entries()) {\n            plugin.onSchemaChange &&\n                plugin.onSchemaChange({\n                    schema,\n                    replaceSchema: modifiedSchema => replaceSchema(modifiedSchema, i),\n                });\n        }\n    }\n    return {\n        getCurrentSchema() {\n            return schema;\n        },\n        init,\n        parse: customParse,\n        validate: customValidate,\n        execute: customExecute,\n        subscribe: customSubscribe,\n        contextFactory: customContextFactory,\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/orchestrator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-engine.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-engine.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useEngine: () => (/* binding */ useEngine)\n/* harmony export */ });\nconst useEngine = (engine) => {\n    return {\n        onExecute: ({ setExecuteFn }) => {\n            if (engine.execute) {\n                setExecuteFn(engine.execute);\n            }\n        },\n        onParse: ({ setParseFn }) => {\n            if (engine.parse) {\n                setParseFn(engine.parse);\n            }\n        },\n        onValidate: ({ setValidationFn, addValidationRule }) => {\n            if (engine.validate) {\n                setValidationFn(engine.validate);\n            }\n            engine.specifiedRules?.map(addValidationRule);\n        },\n        onSubscribe: ({ setSubscribeFn }) => {\n            if (engine.subscribe) {\n                setSubscribeFn(engine.subscribe);\n            }\n        },\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVudmVsb3ArY29yZUAzLjAuNi9ub2RlX21vZHVsZXMvQGVudmVsb3AvY29yZS9lc20vcGx1Z2lucy91c2UtZW5naW5lLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0Esc0JBQXNCLGNBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCx1QkFBdUIsb0NBQW9DO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2FkMTkvRG9jdW1lbnRzL2Fuc2FybS1maWxlLXNlcnZlci9ub2RlX21vZHVsZXMvLnBucG0vQGVudmVsb3ArY29yZUAzLjAuNi9ub2RlX21vZHVsZXMvQGVudmVsb3AvY29yZS9lc20vcGx1Z2lucy91c2UtZW5naW5lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB1c2VFbmdpbmUgPSAoZW5naW5lKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb25FeGVjdXRlOiAoeyBzZXRFeGVjdXRlRm4gfSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVuZ2luZS5leGVjdXRlKSB7XG4gICAgICAgICAgICAgICAgc2V0RXhlY3V0ZUZuKGVuZ2luZS5leGVjdXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25QYXJzZTogKHsgc2V0UGFyc2VGbiB9KSA9PiB7XG4gICAgICAgICAgICBpZiAoZW5naW5lLnBhcnNlKSB7XG4gICAgICAgICAgICAgICAgc2V0UGFyc2VGbihlbmdpbmUucGFyc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblZhbGlkYXRlOiAoeyBzZXRWYWxpZGF0aW9uRm4sIGFkZFZhbGlkYXRpb25SdWxlIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChlbmdpbmUudmFsaWRhdGUpIHtcbiAgICAgICAgICAgICAgICBzZXRWYWxpZGF0aW9uRm4oZW5naW5lLnZhbGlkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuZ2luZS5zcGVjaWZpZWRSdWxlcz8ubWFwKGFkZFZhbGlkYXRpb25SdWxlKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25TdWJzY3JpYmU6ICh7IHNldFN1YnNjcmliZUZuIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChlbmdpbmUuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgICAgc2V0U3Vic2NyaWJlRm4oZW5naW5lLnN1YnNjcmliZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-engine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-extend-context.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-extend-context.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useExtendContext: () => (/* binding */ useExtendContext)\n/* harmony export */ });\nconst useExtendContext = (contextFactory) => ({\n    async onContextBuilding({ context, extendContext }) {\n        extendContext((await contextFactory(context)));\n    },\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVudmVsb3ArY29yZUAzLjAuNi9ub2RlX21vZHVsZXMvQGVudmVsb3AvY29yZS9lc20vcGx1Z2lucy91c2UtZXh0ZW5kLWNvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1AsOEJBQThCLHdCQUF3QjtBQUN0RDtBQUNBLEtBQUs7QUFDTCxDQUFDIiwic291cmNlcyI6WyIvaG9tZS9hZDE5L0RvY3VtZW50cy9hbnNhcm0tZmlsZS1zZXJ2ZXIvbm9kZV9tb2R1bGVzLy5wbnBtL0BlbnZlbG9wK2NvcmVAMy4wLjYvbm9kZV9tb2R1bGVzL0BlbnZlbG9wL2NvcmUvZXNtL3BsdWdpbnMvdXNlLWV4dGVuZC1jb250ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCB1c2VFeHRlbmRDb250ZXh0ID0gKGNvbnRleHRGYWN0b3J5KSA9PiAoe1xuICAgIGFzeW5jIG9uQ29udGV4dEJ1aWxkaW5nKHsgY29udGV4dCwgZXh0ZW5kQ29udGV4dCB9KSB7XG4gICAgICAgIGV4dGVuZENvbnRleHQoKGF3YWl0IGNvbnRleHRGYWN0b3J5KGNvbnRleHQpKSk7XG4gICAgfSxcbn0pO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-extend-context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-masked-errors.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-masked-errors.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR_MESSAGE: () => (/* binding */ DEFAULT_ERROR_MESSAGE),\n/* harmony export */   createDefaultMaskError: () => (/* binding */ createDefaultMaskError),\n/* harmony export */   defaultMaskError: () => (/* binding */ defaultMaskError),\n/* harmony export */   isGraphQLError: () => (/* binding */ isGraphQLError),\n/* harmony export */   isOriginalGraphQLError: () => (/* binding */ isOriginalGraphQLError),\n/* harmony export */   useMaskedErrors: () => (/* binding */ useMaskedErrors)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/utils.js\");\n\nconst DEFAULT_ERROR_MESSAGE = 'Unexpected error.';\nfunction isGraphQLError(error) {\n    return error instanceof Error && error.name === 'GraphQLError';\n}\nfunction isOriginalGraphQLError(error) {\n    if (isGraphQLError(error)) {\n        if (error.originalError != null) {\n            return isOriginalGraphQLError(error.originalError);\n        }\n        return true;\n    }\n    return false;\n}\nfunction createSerializableGraphQLError(message, originalError, isDev) {\n    const error = new Error(message);\n    error.name = 'GraphQLError';\n    if (isDev) {\n        const extensions = originalError instanceof Error\n            ? { message: originalError.message, stack: originalError.stack }\n            : { message: String(originalError) };\n        Object.defineProperty(error, 'extensions', {\n            get() {\n                return extensions;\n            },\n        });\n    }\n    Object.defineProperty(error, 'toJSON', {\n        value() {\n            return {\n                message: error.message,\n                extensions: error.extensions,\n            };\n        },\n    });\n    return error;\n}\nconst createDefaultMaskError = (isDev) => (error, message) => {\n    if (isOriginalGraphQLError(error)) {\n        return error;\n    }\n    return createSerializableGraphQLError(message, error, isDev);\n};\nconst isDev = globalThis.process?.env?.NODE_ENV === 'development';\nconst defaultMaskError = createDefaultMaskError(isDev);\nconst makeHandleResult = (maskError, message) => ({ result, setResult }) => {\n    if (result.errors != null) {\n        setResult({ ...result, errors: result.errors.map(error => maskError(error, message)) });\n    }\n};\nfunction useMaskedErrors(opts) {\n    const maskError = opts?.maskError ?? defaultMaskError;\n    const message = opts?.errorMessage || DEFAULT_ERROR_MESSAGE;\n    const handleResult = makeHandleResult(maskError, message);\n    return {\n        onPluginInit(context) {\n            context.registerContextErrorHandler(({ error, setError }) => {\n                setError(maskError(error, message));\n            });\n        },\n        onExecute() {\n            return {\n                onExecuteDone(payload) {\n                    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.handleStreamOrSingleExecutionResult)(payload, handleResult);\n                },\n            };\n        },\n        onSubscribe() {\n            return {\n                onSubscribeResult(payload) {\n                    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.handleStreamOrSingleExecutionResult)(payload, handleResult);\n                },\n                onSubscribeError({ error, setError }) {\n                    setError(maskError(error, message));\n                },\n            };\n        },\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGVudmVsb3ArY29yZUAzLjAuNi9ub2RlX21vZHVsZXMvQGVudmVsb3AvY29yZS9lc20vcGx1Z2lucy91c2UtbWFza2VkLWVycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWtFO0FBQzNEO0FBQ0E7QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxvREFBb0QsbUJBQW1CO0FBQ3ZFO0FBQ0Esb0JBQW9CLDBFQUEwRTtBQUM5RjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELGlCQUFpQjtBQUNwRTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDhFQUFtQztBQUM5RCxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDhFQUFtQztBQUM5RCxpQkFBaUI7QUFDakIsbUNBQW1DLGlCQUFpQjtBQUNwRDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9hZDE5L0RvY3VtZW50cy9hbnNhcm0tZmlsZS1zZXJ2ZXIvbm9kZV9tb2R1bGVzLy5wbnBtL0BlbnZlbG9wK2NvcmVAMy4wLjYvbm9kZV9tb2R1bGVzL0BlbnZlbG9wL2NvcmUvZXNtL3BsdWdpbnMvdXNlLW1hc2tlZC1lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFuZGxlU3RyZWFtT3JTaW5nbGVFeGVjdXRpb25SZXN1bHQgfSBmcm9tICcuLi91dGlscy5qcyc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9FUlJPUl9NRVNTQUdFID0gJ1VuZXhwZWN0ZWQgZXJyb3IuJztcbmV4cG9ydCBmdW5jdGlvbiBpc0dyYXBoUUxFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yLm5hbWUgPT09ICdHcmFwaFFMRXJyb3InO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzT3JpZ2luYWxHcmFwaFFMRXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoaXNHcmFwaFFMRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgIGlmIChlcnJvci5vcmlnaW5hbEVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBpc09yaWdpbmFsR3JhcGhRTEVycm9yKGVycm9yLm9yaWdpbmFsRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVHcmFwaFFMRXJyb3IobWVzc2FnZSwgb3JpZ2luYWxFcnJvciwgaXNEZXYpIHtcbiAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICBlcnJvci5uYW1lID0gJ0dyYXBoUUxFcnJvcic7XG4gICAgaWYgKGlzRGV2KSB7XG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbnMgPSBvcmlnaW5hbEVycm9yIGluc3RhbmNlb2YgRXJyb3JcbiAgICAgICAgICAgID8geyBtZXNzYWdlOiBvcmlnaW5hbEVycm9yLm1lc3NhZ2UsIHN0YWNrOiBvcmlnaW5hbEVycm9yLnN0YWNrIH1cbiAgICAgICAgICAgIDogeyBtZXNzYWdlOiBTdHJpbmcob3JpZ2luYWxFcnJvcikgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCAnZXh0ZW5zaW9ucycsIHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9ucztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyb3IsICd0b0pTT04nLCB7XG4gICAgICAgIHZhbHVlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IGVycm9yLmV4dGVuc2lvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBlcnJvcjtcbn1cbmV4cG9ydCBjb25zdCBjcmVhdGVEZWZhdWx0TWFza0Vycm9yID0gKGlzRGV2KSA9PiAoZXJyb3IsIG1lc3NhZ2UpID0+IHtcbiAgICBpZiAoaXNPcmlnaW5hbEdyYXBoUUxFcnJvcihlcnJvcikpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlU2VyaWFsaXphYmxlR3JhcGhRTEVycm9yKG1lc3NhZ2UsIGVycm9yLCBpc0Rldik7XG59O1xuY29uc3QgaXNEZXYgPSBnbG9iYWxUaGlzLnByb2Nlc3M/LmVudj8uTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCc7XG5leHBvcnQgY29uc3QgZGVmYXVsdE1hc2tFcnJvciA9IGNyZWF0ZURlZmF1bHRNYXNrRXJyb3IoaXNEZXYpO1xuY29uc3QgbWFrZUhhbmRsZVJlc3VsdCA9IChtYXNrRXJyb3IsIG1lc3NhZ2UpID0+ICh7IHJlc3VsdCwgc2V0UmVzdWx0IH0pID0+IHtcbiAgICBpZiAocmVzdWx0LmVycm9ycyAhPSBudWxsKSB7XG4gICAgICAgIHNldFJlc3VsdCh7IC4uLnJlc3VsdCwgZXJyb3JzOiByZXN1bHQuZXJyb3JzLm1hcChlcnJvciA9PiBtYXNrRXJyb3IoZXJyb3IsIG1lc3NhZ2UpKSB9KTtcbiAgICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU1hc2tlZEVycm9ycyhvcHRzKSB7XG4gICAgY29uc3QgbWFza0Vycm9yID0gb3B0cz8ubWFza0Vycm9yID8/IGRlZmF1bHRNYXNrRXJyb3I7XG4gICAgY29uc3QgbWVzc2FnZSA9IG9wdHM/LmVycm9yTWVzc2FnZSB8fCBERUZBVUxUX0VSUk9SX01FU1NBR0U7XG4gICAgY29uc3QgaGFuZGxlUmVzdWx0ID0gbWFrZUhhbmRsZVJlc3VsdChtYXNrRXJyb3IsIG1lc3NhZ2UpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uUGx1Z2luSW5pdChjb250ZXh0KSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlZ2lzdGVyQ29udGV4dEVycm9ySGFuZGxlcigoeyBlcnJvciwgc2V0RXJyb3IgfSkgPT4ge1xuICAgICAgICAgICAgICAgIHNldEVycm9yKG1hc2tFcnJvcihlcnJvciwgbWVzc2FnZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRXhlY3V0ZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb25FeGVjdXRlRG9uZShwYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJlYW1PclNpbmdsZUV4ZWN1dGlvblJlc3VsdChwYXlsb2FkLCBoYW5kbGVSZXN1bHQpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBvblN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb25TdWJzY3JpYmVSZXN1bHQocGF5bG9hZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyZWFtT3JTaW5nbGVFeGVjdXRpb25SZXN1bHQocGF5bG9hZCwgaGFuZGxlUmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uU3Vic2NyaWJlRXJyb3IoeyBlcnJvciwgc2V0RXJyb3IgfSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRFcnJvcihtYXNrRXJyb3IoZXJyb3IsIG1lc3NhZ2UpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/plugins/use-masked-errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   envelopIsIntrospectionSymbol: () => (/* binding */ envelopIsIntrospectionSymbol),\n/* harmony export */   errorAsyncIterator: () => (/* binding */ errorAsyncIterator),\n/* harmony export */   finalAsyncIterator: () => (/* binding */ finalAsyncIterator),\n/* harmony export */   handleStreamOrSingleExecutionResult: () => (/* binding */ handleStreamOrSingleExecutionResult),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isIntrospectionOperationString: () => (/* binding */ isIntrospectionOperationString),\n/* harmony export */   makeExecute: () => (/* binding */ makeExecute),\n/* harmony export */   makeSubscribe: () => (/* binding */ makeSubscribe),\n/* harmony export */   mapAsyncIterator: () => (/* binding */ mapAsyncIterator)\n/* harmony export */ });\nconst envelopIsIntrospectionSymbol = Symbol('ENVELOP_IS_INTROSPECTION');\nfunction isIntrospectionOperationString(operation) {\n    return (typeof operation === 'string' ? operation : operation.body).indexOf('__schema') !== -1;\n}\nfunction getSubscribeArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            subscribeFieldResolver: args[7],\n        };\n}\n/**\n * Utility function for making a subscribe function that handles polymorphic arguments.\n */\nconst makeSubscribe = (subscribeFn) => ((...polyArgs) => subscribeFn(getSubscribeArgs(polyArgs)));\nfunction mapAsyncIterator(source, mapper) {\n    const iterator = source[Symbol.asyncIterator]();\n    async function mapResult(result) {\n        if (result.done) {\n            return result;\n        }\n        try {\n            return { value: await mapper(result.value), done: false };\n        }\n        catch (error) {\n            try {\n                await iterator.return?.();\n            }\n            catch (_error) {\n                /* ignore error */\n            }\n            throw error;\n        }\n    }\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            return await mapResult(await iterator.next());\n        },\n        async return() {\n            const promise = iterator.return?.();\n            return promise ? await mapResult(await promise) : { value: undefined, done: true };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await mapResult(await promise);\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nfunction getExecuteArgs(args) {\n    return args.length === 1\n        ? args[0]\n        : {\n            schema: args[0],\n            document: args[1],\n            rootValue: args[2],\n            contextValue: args[3],\n            variableValues: args[4],\n            operationName: args[5],\n            fieldResolver: args[6],\n            typeResolver: args[7],\n        };\n}\n/**\n * Utility function for making a execute function that handles polymorphic arguments.\n */\nconst makeExecute = (executeFn) => ((...polyArgs) => executeFn(getExecuteArgs(polyArgs)));\n/**\n * Returns true if the provided object implements the AsyncIterator protocol via\n * implementing a `Symbol.asyncIterator` method.\n *\n * Source: https://github.com/graphql/graphql-js/blob/main/src/jsutils/isAsyncIterable.ts\n */\nfunction isAsyncIterable(maybeAsyncIterable) {\n    return (typeof maybeAsyncIterable === 'object' &&\n        maybeAsyncIterable != null &&\n        typeof maybeAsyncIterable[Symbol.asyncIterator] === 'function');\n}\n/**\n * A utility function for handling `onExecuteDone` hook result, for simplifying the handling of AsyncIterable returned from `execute`.\n *\n * @param payload The payload send to `onExecuteDone` hook function\n * @param fn The handler to be executed on each result\n * @returns a subscription for streamed results, or undefined in case of an non-async\n */\nfunction handleStreamOrSingleExecutionResult(payload, fn) {\n    if (isAsyncIterable(payload.result)) {\n        return { onNext: fn };\n    }\n    fn({\n        args: payload.args,\n        result: payload.result,\n        setResult: payload.setResult,\n    });\n    return undefined;\n}\nfunction finalAsyncIterator(source, onFinal) {\n    const iterator = source[Symbol.asyncIterator]();\n    let isDone = false;\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            const result = await iterator.next();\n            if (result.done && isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return result;\n        },\n        async return() {\n            const promise = iterator.return?.();\n            if (isDone === false) {\n                isDone = true;\n                onFinal();\n            }\n            return promise ? await promise : { done: true, value: undefined };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\nfunction errorAsyncIterator(source, onError) {\n    const iterator = source[Symbol.asyncIterator]();\n    const stream = {\n        [Symbol.asyncIterator]() {\n            return stream;\n        },\n        async next() {\n            try {\n                return await iterator.next();\n            }\n            catch (error) {\n                onError(error);\n                return { done: true, value: undefined };\n            }\n        },\n        async return() {\n            const promise = iterator.return?.();\n            return promise ? await promise : { done: true, value: undefined };\n        },\n        async throw(error) {\n            const promise = iterator.throw?.();\n            if (promise) {\n                return await promise;\n            }\n            // if the source has no throw method we just re-throw error\n            // usually throw is not called anyways\n            throw error;\n        },\n    };\n    return stream;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@envelop+core@3.0.6/node_modules/@envelop/core/esm/utils.js\n");

/***/ })

};
;