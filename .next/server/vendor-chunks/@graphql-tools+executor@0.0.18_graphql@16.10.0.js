"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@graphql-tools+executor@0.0.18_graphql@16.10.0";
exports.ids = ["vendor-chunks/@graphql-tools+executor@0.0.18_graphql@16.10.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/execute.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/execute.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertValidExecutionArguments: () => (/* binding */ assertValidExecutionArguments),\n/* harmony export */   buildExecutionContext: () => (/* binding */ buildExecutionContext),\n/* harmony export */   buildResolveInfo: () => (/* binding */ buildResolveInfo),\n/* harmony export */   defaultFieldResolver: () => (/* binding */ defaultFieldResolver),\n/* harmony export */   defaultTypeResolver: () => (/* binding */ defaultTypeResolver),\n/* harmony export */   execute: () => (/* binding */ execute),\n/* harmony export */   executeSync: () => (/* binding */ executeSync),\n/* harmony export */   flattenIncrementalResults: () => (/* binding */ flattenIncrementalResults),\n/* harmony export */   getFieldDef: () => (/* binding */ getFieldDef),\n/* harmony export */   isIncrementalResult: () => (/* binding */ isIncrementalResult),\n/* harmony export */   subscribe: () => (/* binding */ subscribe)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/validate.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/error/locatedError.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/definition.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/execution/values.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/introspection.mjs\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/memoize.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/collectFields.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/jsutils.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/errors.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/rootTypes.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/Path.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/getArgumentValues.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/inspect.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/directives.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/isAsyncIterable.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/mapAsyncIterator.js\");\n/* harmony import */ var _values_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./values.js */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/values.js\");\n/* harmony import */ var _promiseForObject_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./promiseForObject.js */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/promiseForObject.js\");\n/* harmony import */ var _flattenAsyncIterable_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./flattenAsyncIterable.js */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/flattenAsyncIterable.js\");\n/* harmony import */ var _invariant_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./invariant.js */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/invariant.js\");\n/* harmony import */ var value_or_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! value-or-promise */ \"(rsc)/./node_modules/.pnpm/value-or-promise@1.0.12/node_modules/value-or-promise/build/module/index.js\");\n\n\n\n\n\n\n\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\nconst collectSubfields = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__.memoize3)((exeContext, returnType, fieldNodes) => (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_2__.collectSubFields)(exeContext.schema, exeContext.fragments, exeContext.variableValues, returnType, fieldNodes));\n/**\n * Implements the \"Executing requests\" section of the GraphQL specification,\n * including `@defer` and `@stream` as proposed in\n * https://github.com/graphql/graphql-spec/pull/742\n *\n * This function returns a Promise of an IncrementalExecutionResults\n * object. This object either consists of a single ExecutionResult, or an\n * object containing an `initialResult` and a stream of `subsequentResults`.\n *\n * If the arguments to this function do not result in a legal execution context,\n * a GraphQLError will be thrown immediately explaining the invalid input.\n */\nfunction execute(args) {\n    // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n    const exeContext = buildExecutionContext(args);\n    // Return early errors if execution context failed.\n    if (!('schema' in exeContext)) {\n        return {\n            errors: exeContext.map(e => {\n                var _a;\n                Object.defineProperty(e, 'extensions', {\n                    value: {\n                        ...e.extensions,\n                        http: {\n                            ...(_a = e.extensions) === null || _a === void 0 ? void 0 : _a['http'],\n                            status: 400,\n                        },\n                    },\n                });\n                return e;\n            }),\n        };\n    }\n    return executeImpl(exeContext);\n}\nfunction executeImpl(exeContext) {\n    // Return a Promise that will eventually resolve to the data described by\n    // The \"Response\" section of the GraphQL specification.\n    //\n    // If errors are encountered while executing a GraphQL field, only that\n    // field and its descendants will be omitted, and sibling fields will still\n    // be executed. An execution which encounters errors will still result in a\n    // resolved Promise.\n    //\n    // Errors from sub-fields of a NonNull type may propagate to the top level,\n    // at which point we still log the error and null the parent field, which\n    // in this case is the entire response.\n    return new value_or_promise__WEBPACK_IMPORTED_MODULE_0__.ValueOrPromise(() => executeOperation(exeContext))\n        .then(data => {\n        const initialResult = buildResponse(data, exeContext.errors);\n        if (exeContext.subsequentPayloads.size > 0) {\n            return {\n                initialResult: {\n                    ...initialResult,\n                    hasNext: true,\n                },\n                subsequentResults: yieldSubsequentPayloads(exeContext),\n            };\n        }\n        return initialResult;\n    }, (error) => {\n        exeContext.errors.push(error);\n        return buildResponse(null, exeContext.errors);\n    })\n        .resolve();\n}\n/**\n * Also implements the \"Executing requests\" section of the GraphQL specification.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\nfunction executeSync(args) {\n    const result = execute(args);\n    // Assert that the execution was synchronous.\n    if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(result) || 'initialResult' in result) {\n        throw new Error('GraphQL execution failed to complete synchronously.');\n    }\n    return result;\n}\n/**\n * Given a completed execution context and data, build the `{ errors, data }`\n * response defined by the \"Response\" section of the GraphQL specification.\n */\nfunction buildResponse(data, errors) {\n    return errors.length === 0 ? { data } : { errors, data };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n *\n * @internal\n */\nfunction assertValidExecutionArguments(schema, document, rawVariableValues) {\n    console.assert(!!document, 'Must provide document.');\n    // If the schema used for execution is invalid, throw an error.\n    (0,graphql__WEBPACK_IMPORTED_MODULE_4__.assertValidSchema)(schema);\n    // Variables, if provided, must be an object.\n    console.assert(rawVariableValues == null || (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isObjectLike)(rawVariableValues), 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.');\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n *\n * TODO: consider no longer exporting this function\n * @internal\n */\nfunction buildExecutionContext(args) {\n    var _a, _b;\n    const { schema, document, rootValue, contextValue, variableValues: rawVariableValues, operationName, fieldResolver, typeResolver, subscribeFieldResolver, } = args;\n    // If the schema used for execution is invalid, throw an error.\n    (0,graphql__WEBPACK_IMPORTED_MODULE_4__.assertValidSchema)(schema);\n    let operation;\n    const fragments = Object.create(null);\n    for (const definition of document.definitions) {\n        switch (definition.kind) {\n            case graphql__WEBPACK_IMPORTED_MODULE_5__.Kind.OPERATION_DEFINITION:\n                if (operationName == null) {\n                    if (operation !== undefined) {\n                        return [(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)('Must provide operation name if query contains multiple operations.')];\n                    }\n                    operation = definition;\n                }\n                else if (((_a = definition.name) === null || _a === void 0 ? void 0 : _a.value) === operationName) {\n                    operation = definition;\n                }\n                break;\n            case graphql__WEBPACK_IMPORTED_MODULE_5__.Kind.FRAGMENT_DEFINITION:\n                fragments[definition.name.value] = definition;\n                break;\n            default:\n            // ignore non-executable definitions\n        }\n    }\n    if (!operation) {\n        if (operationName != null) {\n            return [(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Unknown operation named \"${operationName}\".`)];\n        }\n        return [(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)('Must provide an operation.')];\n    }\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    /* c8 ignore next */\n    const variableDefinitions = (_b = operation.variableDefinitions) !== null && _b !== void 0 ? _b : [];\n    const coercedVariableValues = (0,_values_js__WEBPACK_IMPORTED_MODULE_7__.getVariableValues)(schema, variableDefinitions, rawVariableValues !== null && rawVariableValues !== void 0 ? rawVariableValues : {}, {\n        maxErrors: 50,\n    });\n    if (coercedVariableValues.errors) {\n        return coercedVariableValues.errors;\n    }\n    return {\n        schema,\n        fragments,\n        rootValue,\n        contextValue,\n        operation,\n        variableValues: coercedVariableValues.coerced,\n        fieldResolver: fieldResolver !== null && fieldResolver !== void 0 ? fieldResolver : defaultFieldResolver,\n        typeResolver: typeResolver !== null && typeResolver !== void 0 ? typeResolver : defaultTypeResolver,\n        subscribeFieldResolver: subscribeFieldResolver !== null && subscribeFieldResolver !== void 0 ? subscribeFieldResolver : defaultFieldResolver,\n        subsequentPayloads: new Set(),\n        errors: [],\n    };\n}\nfunction buildPerEventExecutionContext(exeContext, payload) {\n    return {\n        ...exeContext,\n        rootValue: payload,\n        subsequentPayloads: new Set(),\n        errors: [],\n    };\n}\n/**\n * Implements the \"Executing operations\" section of the spec.\n */\nfunction executeOperation(exeContext) {\n    const { operation, schema, fragments, variableValues, rootValue } = exeContext;\n    const rootType = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_8__.getDefinedRootType)(schema, operation.operation, [operation]);\n    if (rootType == null) {\n        (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Schema is not configured to execute ${operation.operation} operation.`, {\n            nodes: operation,\n        });\n    }\n    const { fields: rootFields, patches } = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_2__.collectFields)(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const path = undefined;\n    let result;\n    if (operation.operation === 'mutation') {\n        result = executeFieldsSerially(exeContext, rootType, rootValue, path, rootFields);\n    }\n    else {\n        result = executeFields(exeContext, rootType, rootValue, path, rootFields);\n    }\n    for (const patch of patches) {\n        const { label, fields: patchFields } = patch;\n        executeDeferredFragment(exeContext, rootType, rootValue, patchFields, label, path);\n    }\n    return result;\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that must be executed serially.\n */\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n    return (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.promiseReduce)(fields, (results, [responseName, fieldNodes]) => {\n        const fieldPath = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.addPath)(path, responseName, parentType.name);\n        return new value_or_promise__WEBPACK_IMPORTED_MODULE_0__.ValueOrPromise(() => executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath))\n            .then(result => {\n            if (result === undefined) {\n                return results;\n            }\n            results[responseName] = result;\n            return results;\n        })\n            .resolve();\n    }, Object.create(null));\n}\n/**\n * Implements the \"Executing selection sets\" section of the spec\n * for fields that may be executed in parallel.\n */\nfunction executeFields(exeContext, parentType, sourceValue, path, fields, asyncPayloadRecord) {\n    const results = Object.create(null);\n    let containsPromise = false;\n    try {\n        for (const [responseName, fieldNodes] of fields) {\n            const fieldPath = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.addPath)(path, responseName, parentType.name);\n            const result = executeField(exeContext, parentType, sourceValue, fieldNodes, fieldPath, asyncPayloadRecord);\n            if (result !== undefined) {\n                results[responseName] = result;\n                if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(result)) {\n                    containsPromise = true;\n                }\n            }\n        }\n    }\n    catch (error) {\n        if (containsPromise) {\n            // Ensure that any promises returned by other fields are handled, as they may also reject.\n            return (0,_promiseForObject_js__WEBPACK_IMPORTED_MODULE_10__.promiseForObject)(results).finally(() => {\n                throw error;\n            });\n        }\n        throw error;\n    }\n    // If there are no promises, we can just return the object\n    if (!containsPromise) {\n        return results;\n    }\n    // Otherwise, results is a map from field name to the result of resolving that\n    // field, which is possibly a promise. Return a promise that will return this\n    // same map, but with any promises replaced with the values they resolved to.\n    return (0,_promiseForObject_js__WEBPACK_IMPORTED_MODULE_10__.promiseForObject)(results);\n}\n/**\n * Implements the \"Executing fields\" section of the spec\n * In particular, this function figures out the value that the field returns by\n * calling its resolve function, then calls completeValue to complete promises,\n * serialize scalars, or execute the sub-selection-set for objects.\n */\nfunction executeField(exeContext, parentType, source, fieldNodes, path, asyncPayloadRecord) {\n    var _a, _b;\n    const errors = (_a = asyncPayloadRecord === null || asyncPayloadRecord === void 0 ? void 0 : asyncPayloadRecord.errors) !== null && _a !== void 0 ? _a : exeContext.errors;\n    const fieldDef = getFieldDef(exeContext.schema, parentType, fieldNodes[0]);\n    if (!fieldDef) {\n        return;\n    }\n    const returnType = fieldDef.type;\n    const resolveFn = (_b = fieldDef.resolve) !== null && _b !== void 0 ? _b : exeContext.fieldResolver;\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path);\n    // Get the resolve function, regardless of if its result is normal or abrupt (error).\n    try {\n        // Build a JS object of arguments from the field.arguments AST, using the\n        // variables scope to fulfill any variable references.\n        // TODO: find a way to memoize, in case this field is within a List type.\n        const args = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_11__.getArgumentValues)(fieldDef, fieldNodes[0], exeContext.variableValues);\n        // The resolve function's optional third argument is a context value that\n        // is provided to every resolve function within an execution. It is commonly\n        // used to represent an authenticated user, or request-specific caches.\n        const contextValue = exeContext.contextValue;\n        const result = resolveFn(source, args, contextValue, info);\n        let completed;\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(result)) {\n            completed = result.then(resolved => completeValue(exeContext, returnType, fieldNodes, info, path, resolved, asyncPayloadRecord));\n        }\n        else {\n            completed = completeValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n        }\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(completed)) {\n            // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n            // to take a second callback for the error case.\n            return completed.then(undefined, rawError => {\n                const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(path));\n                const handledError = handleFieldError(error, returnType, errors);\n                filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                return handledError;\n            });\n        }\n        return completed;\n    }\n    catch (rawError) {\n        const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(path));\n        const handledError = handleFieldError(error, returnType, errors);\n        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n        return handledError;\n    }\n}\n/**\n * TODO: consider no longer exporting this function\n * @internal\n */\nfunction buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n    // The resolve function's optional fourth argument is a collection of\n    // information about the current execution state.\n    return {\n        fieldName: fieldDef.name,\n        fieldNodes,\n        returnType: fieldDef.type,\n        parentType,\n        path,\n        schema: exeContext.schema,\n        fragments: exeContext.fragments,\n        rootValue: exeContext.rootValue,\n        operation: exeContext.operation,\n        variableValues: exeContext.variableValues,\n    };\n}\nfunction handleFieldError(error, returnType, errors) {\n    // If the field type is non-nullable, then it is resolved without any\n    // protection from errors, however it still properly locates the error.\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_13__.isNonNullType)(returnType)) {\n        throw error;\n    }\n    // Otherwise, error protection is applied, logging the error and resolving\n    // a null value for this field if one is encountered.\n    errors.push(error);\n    return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Value Completion\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by executing all sub-selections.\n */\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    // If result is an Error, throw a located error.\n    if (result instanceof Error) {\n        throw result;\n    }\n    // If field type is NonNull, complete for inner type, and throw field error\n    // if result is null.\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_13__.isNonNullType)(returnType)) {\n        const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result, asyncPayloadRecord);\n        if (completed === null) {\n            throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);\n        }\n        return completed;\n    }\n    // If result value is null or undefined then return null.\n    if (result == null) {\n        return null;\n    }\n    // If field type is List, complete each item in the list with the inner type\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_13__.isListType)(returnType)) {\n        return completeListValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n    // returning null if serialization is not possible.\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_13__.isLeafType)(returnType)) {\n        return completeLeafValue(returnType, result);\n    }\n    // If field type is an abstract type, Interface or Union, determine the\n    // runtime Object type and complete for that type.\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_13__.isAbstractType)(returnType)) {\n        return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    // If field type is Object, execute and complete all sub-selections.\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_13__.isObjectType)(returnType)) {\n        return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord);\n    }\n    /* c8 ignore next 6 */\n    // Not reachable, all possible output types have been considered.\n    console.assert(false, 'Cannot complete value of unexpected output type: ' + (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__.inspect)(returnType));\n}\n/**\n * Returns an object containing the `@stream` arguments if a field should be\n * streamed based on the experimental flag, stream directive present and\n * not disabled by the \"if\" argument.\n */\nfunction getStreamValues(exeContext, fieldNodes, path) {\n    // do not stream inner lists of multi-dimensional lists\n    if (typeof path.key === 'number') {\n        return;\n    }\n    // validation only allows equivalent streams on multiple fields, so it is\n    // safe to only check the first fieldNode for the stream directive\n    const stream = (0,graphql__WEBPACK_IMPORTED_MODULE_15__.getDirectiveValues)(_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_16__.GraphQLStreamDirective, fieldNodes[0], exeContext.variableValues);\n    if (!stream) {\n        return;\n    }\n    if (stream.if === false) {\n        return;\n    }\n    (0,_invariant_js__WEBPACK_IMPORTED_MODULE_17__.invariant)(typeof stream['initialCount'] === 'number', 'initialCount must be a number');\n    (0,_invariant_js__WEBPACK_IMPORTED_MODULE_17__.invariant)(stream['initialCount'] >= 0, 'initialCount must be a positive integer');\n    return {\n        initialCount: stream['initialCount'],\n        label: typeof stream['label'] === 'string' ? stream['label'] : undefined,\n    };\n}\n/**\n * Complete a async iterator value by completing the result and calling\n * recursively until all the results are completed.\n */\nasync function completeAsyncIteratorValue(exeContext, itemType, fieldNodes, info, path, iterator, asyncPayloadRecord) {\n    var _a;\n    const errors = (_a = asyncPayloadRecord === null || asyncPayloadRecord === void 0 ? void 0 : asyncPayloadRecord.errors) !== null && _a !== void 0 ? _a : exeContext.errors;\n    const stream = getStreamValues(exeContext, fieldNodes, path);\n    let containsPromise = false;\n    const completedResults = [];\n    let index = 0;\n    while (true) {\n        if (stream && typeof stream.initialCount === 'number' && index >= stream.initialCount) {\n            executeStreamIterator(index, iterator, exeContext, fieldNodes, info, itemType, path, stream.label, asyncPayloadRecord);\n            break;\n        }\n        const itemPath = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.addPath)(path, index, undefined);\n        let iteration;\n        try {\n            iteration = await iterator.next();\n            if (iteration.done) {\n                break;\n            }\n        }\n        catch (rawError) {\n            const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(itemPath));\n            completedResults.push(handleFieldError(error, itemType, errors));\n            break;\n        }\n        if (completeListItemValue(iteration.value, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord)) {\n            containsPromise = true;\n        }\n        index += 1;\n    }\n    return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    var _a;\n    const itemType = returnType.ofType;\n    const errors = (_a = asyncPayloadRecord === null || asyncPayloadRecord === void 0 ? void 0 : asyncPayloadRecord.errors) !== null && _a !== void 0 ? _a : exeContext.errors;\n    if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_18__.isAsyncIterable)(result)) {\n        const iterator = result[Symbol.asyncIterator]();\n        return completeAsyncIteratorValue(exeContext, itemType, fieldNodes, info, path, iterator, asyncPayloadRecord);\n    }\n    if (!(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isIterableObject)(result)) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Expected Iterable, but did not find one for field \"${info.parentType.name}.${info.fieldName}\".`);\n    }\n    const stream = getStreamValues(exeContext, fieldNodes, path);\n    // This is specified as a simple map, however we're optimizing the path\n    // where the list contains no Promises by avoiding creating another Promise.\n    let containsPromise = false;\n    let previousAsyncPayloadRecord = asyncPayloadRecord;\n    const completedResults = [];\n    let index = 0;\n    for (const item of result) {\n        // No need to modify the info object containing the path,\n        // since from here on it is not ever accessed by resolver functions.\n        const itemPath = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.addPath)(path, index, undefined);\n        if (stream && typeof stream.initialCount === 'number' && index >= stream.initialCount) {\n            previousAsyncPayloadRecord = executeStreamField(path, itemPath, item, exeContext, fieldNodes, info, itemType, stream.label, previousAsyncPayloadRecord);\n            index++;\n            continue;\n        }\n        if (completeListItemValue(item, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord)) {\n            containsPromise = true;\n        }\n        index++;\n    }\n    return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a list item value by adding it to the completed results.\n *\n * Returns true if the value is a Promise.\n */\nfunction completeListItemValue(item, completedResults, errors, exeContext, itemType, fieldNodes, info, itemPath, asyncPayloadRecord) {\n    try {\n        let completedItem;\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(item)) {\n            completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved, asyncPayloadRecord));\n        }\n        else {\n            completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n        }\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(completedItem)) {\n            // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n            // to take a second callback for the error case.\n            completedResults.push(completedItem.then(undefined, rawError => {\n                const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(itemPath));\n                const handledError = handleFieldError(error, itemType, errors);\n                filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                return handledError;\n            }));\n            return true;\n        }\n        completedResults.push(completedItem);\n    }\n    catch (rawError) {\n        const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(itemPath));\n        const handledError = handleFieldError(error, itemType, errors);\n        filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        completedResults.push(handledError);\n    }\n    return false;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\nfunction completeLeafValue(returnType, result) {\n    const serializedResult = returnType.serialize(result);\n    if (serializedResult == null) {\n        throw new Error(`Expected \\`${(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__.inspect)(returnType)}.serialize(${(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__.inspect)(result)})\\` to ` +\n            `return non-nullable value, returned: ${(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__.inspect)(serializedResult)}`);\n    }\n    return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    var _a;\n    const resolveTypeFn = (_a = returnType.resolveType) !== null && _a !== void 0 ? _a : exeContext.typeResolver;\n    const contextValue = exeContext.contextValue;\n    const runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n    if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(runtimeType)) {\n        return runtimeType.then(resolvedRuntimeType => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result, asyncPayloadRecord));\n    }\n    return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result, asyncPayloadRecord);\n}\nfunction ensureValidRuntimeType(runtimeTypeName, exeContext, returnType, fieldNodes, info, result) {\n    if (runtimeTypeName == null) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\". Either the \"${returnType.name}\" type should provide a \"resolveType\" function or each possible type should provide an \"isTypeOf\" function.`, { nodes: fieldNodes });\n    }\n    // releases before 16.0.0 supported returning `GraphQLObjectType` from `resolveType`\n    // TODO: remove in 17.0.0 release\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_13__.isObjectType)(runtimeTypeName)) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)('Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.');\n    }\n    if (typeof runtimeTypeName !== 'string') {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Abstract type \"${returnType.name}\" must resolve to an Object type at runtime for field \"${info.parentType.name}.${info.fieldName}\" with ` +\n            `value ${(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__.inspect)(result)}, received \"${(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__.inspect)(runtimeTypeName)}\".`);\n    }\n    const runtimeType = exeContext.schema.getType(runtimeTypeName);\n    if (runtimeType == null) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Abstract type \"${returnType.name}\" was resolved to a type \"${runtimeTypeName}\" that does not exist inside the schema.`, { nodes: fieldNodes });\n    }\n    if (!(0,graphql__WEBPACK_IMPORTED_MODULE_13__.isObjectType)(runtimeType)) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Abstract type \"${returnType.name}\" was resolved to a non-object type \"${runtimeTypeName}\".`, { nodes: fieldNodes });\n    }\n    if (!exeContext.schema.isSubType(returnType, runtimeType)) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Runtime Object type \"${runtimeType.name}\" is not a possible type for \"${returnType.name}\".`, { nodes: fieldNodes });\n    }\n    return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result, asyncPayloadRecord) {\n    // If there is an isTypeOf predicate function, call it with the\n    // current result. If isTypeOf returns false, then raise an error rather\n    // than continuing execution.\n    if (returnType.isTypeOf) {\n        const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(isTypeOf)) {\n            return isTypeOf.then(resolvedIsTypeOf => {\n                if (!resolvedIsTypeOf) {\n                    throw invalidReturnTypeError(returnType, result, fieldNodes);\n                }\n                return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord);\n            });\n        }\n        if (!isTypeOf) {\n            throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n    }\n    return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord);\n}\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n    return (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`Expected value of type \"${returnType.name}\" but got: ${(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__.inspect)(result)}.`, {\n        nodes: fieldNodes,\n    });\n}\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result, asyncPayloadRecord) {\n    // Collect sub-fields to execute to complete this value.\n    const { fields: subFieldNodes, patches: subPatches } = collectSubfields(exeContext, returnType, fieldNodes);\n    const subFields = executeFields(exeContext, returnType, result, path, subFieldNodes, asyncPayloadRecord);\n    for (const subPatch of subPatches) {\n        const { label, fields: subPatchFieldNodes } = subPatch;\n        executeDeferredFragment(exeContext, returnType, result, subPatchFieldNodes, label, path, asyncPayloadRecord);\n    }\n    return subFields;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\nconst defaultTypeResolver = function (value, contextValue, info, abstractType) {\n    // First, look for `__typename`.\n    if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isObjectLike)(value) && typeof value['__typename'] === 'string') {\n        return value['__typename'];\n    }\n    // Otherwise, test each possible type.\n    const possibleTypes = info.schema.getPossibleTypes(abstractType);\n    const promisedIsTypeOfResults = [];\n    for (let i = 0; i < possibleTypes.length; i++) {\n        const type = possibleTypes[i];\n        if (type.isTypeOf) {\n            const isTypeOfResult = type.isTypeOf(value, contextValue, info);\n            if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(isTypeOfResult)) {\n                promisedIsTypeOfResults[i] = isTypeOfResult;\n            }\n            else if (isTypeOfResult) {\n                return type.name;\n            }\n        }\n    }\n    if (promisedIsTypeOfResults.length) {\n        return Promise.all(promisedIsTypeOfResults).then(isTypeOfResults => {\n            for (let i = 0; i < isTypeOfResults.length; i++) {\n                if (isTypeOfResults[i]) {\n                    return possibleTypes[i].name;\n                }\n            }\n        });\n    }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\nconst defaultFieldResolver = function (source, args, contextValue, info) {\n    // ensure source is a value for which property access is acceptable.\n    if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isObjectLike)(source) || typeof source === 'function') {\n        const property = source[info.fieldName];\n        if (typeof property === 'function') {\n            return source[info.fieldName](args, contextValue, info);\n        }\n        return property;\n    }\n};\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification,\n * including `@defer` and `@stream` as proposed in\n * https://github.com/graphql/graphql-spec/pull/742\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with descriptive\n * errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription resolver\n * logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of result representing the response stream.\n *\n * Each result may be an ExecutionResult with no `hasNext` (if executing the\n * event did not use `@defer` or `@stream`), or an\n * `InitialIncrementalExecutionResult` or `SubsequentIncrementalExecutionResult`\n * (if executing the event used `@defer` or `@stream`). In the case of\n * incremental execution results, each event produces a single\n * `InitialIncrementalExecutionResult` followed by one or more\n * `SubsequentIncrementalExecutionResult`s; all but the last have `hasNext: true`,\n * and the last has `hasNext: false`. There is no interleaving between results\n * generated from the same original event.\n *\n * Accepts an object with named arguments.\n */\nfunction subscribe(args) {\n    // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n    const exeContext = buildExecutionContext(args);\n    // Return early errors if execution context failed.\n    if (!('schema' in exeContext)) {\n        return {\n            errors: exeContext.map(e => {\n                var _a;\n                Object.defineProperty(e, 'extensions', {\n                    value: {\n                        ...e.extensions,\n                        http: {\n                            ...(_a = e.extensions) === null || _a === void 0 ? void 0 : _a['http'],\n                            status: 400,\n                        },\n                    },\n                });\n                return e;\n            }),\n        };\n    }\n    const resultOrStream = createSourceEventStreamImpl(exeContext);\n    if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(resultOrStream)) {\n        return resultOrStream.then(resolvedResultOrStream => mapSourceToResponse(exeContext, resolvedResultOrStream));\n    }\n    return mapSourceToResponse(exeContext, resultOrStream);\n}\nfunction flattenIncrementalResults(incrementalResults) {\n    const subsequentIterator = incrementalResults.subsequentResults;\n    let initialResultSent = false;\n    let done = false;\n    return {\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        async next() {\n            if (done) {\n                return {\n                    value: undefined,\n                    done,\n                };\n            }\n            if (initialResultSent) {\n                return subsequentIterator.next();\n            }\n            initialResultSent = true;\n            return Promise.resolve({\n                value: incrementalResults.initialResult,\n                done,\n            });\n        },\n        return() {\n            done = true;\n            return subsequentIterator.return();\n        },\n        throw(error) {\n            done = true;\n            return subsequentIterator.throw(error);\n        },\n    };\n}\nasync function* ensureAsyncIterable(someExecutionResult) {\n    if ('initialResult' in someExecutionResult) {\n        yield* flattenIncrementalResults(someExecutionResult);\n    }\n    else {\n        yield someExecutionResult;\n    }\n}\nfunction mapSourceToResponse(exeContext, resultOrStream) {\n    if (!(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_18__.isAsyncIterable)(resultOrStream)) {\n        return resultOrStream;\n    }\n    // For each payload yielded from a subscription, map it over the normal\n    // GraphQL `execute` function, with `payload` as the rootValue.\n    // This implements the \"MapSourceToResponseEvent\" algorithm described in\n    // the GraphQL specification. The `execute` function provides the\n    // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n    // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n    return (0,_flattenAsyncIterable_js__WEBPACK_IMPORTED_MODULE_19__.flattenAsyncIterable)((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_20__.mapAsyncIterator)(resultOrStream[Symbol.asyncIterator](), async (payload) => ensureAsyncIterable(await executeImpl(buildPerEventExecutionContext(exeContext, payload))), async function* (error) {\n        const wrappedError = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(error.message, {\n            originalError: error,\n            nodes: [exeContext.operation],\n        });\n        yield {\n            errors: [wrappedError],\n        };\n    }));\n}\nfunction createSourceEventStreamImpl(exeContext) {\n    try {\n        const eventStream = executeSubscription(exeContext);\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(eventStream)) {\n            return eventStream.then(undefined, error => ({ errors: [error] }));\n        }\n        return eventStream;\n    }\n    catch (error) {\n        return { errors: [error] };\n    }\n}\nfunction executeSubscription(exeContext) {\n    var _a;\n    const { schema, fragments, operation, variableValues, rootValue } = exeContext;\n    const rootType = schema.getSubscriptionType();\n    if (rootType == null) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)('Schema is not configured to execute subscription operation.', { nodes: operation });\n    }\n    const { fields: rootFields } = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_2__.collectFields)(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const [responseName, fieldNodes] = [...rootFields.entries()][0];\n    const fieldName = fieldNodes[0].name.value;\n    const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n    if (!fieldDef) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)(`The subscription field \"${fieldName}\" is not defined.`, { nodes: fieldNodes });\n    }\n    const path = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.addPath)(undefined, responseName, rootType.name);\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n    try {\n        // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n        // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n        // Build a JS object of arguments from the field.arguments AST, using the\n        // variables scope to fulfill any variable references.\n        const args = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_11__.getArgumentValues)(fieldDef, fieldNodes[0], variableValues);\n        // The resolve function's optional third argument is a context value that\n        // is provided to every resolve function within an execution. It is commonly\n        // used to represent an authenticated user, or request-specific caches.\n        const contextValue = exeContext.contextValue;\n        // Call the `subscribe()` resolver or the default resolver to produce an\n        // AsyncIterable yielding raw payloads.\n        const resolveFn = (_a = fieldDef.subscribe) !== null && _a !== void 0 ? _a : exeContext.subscribeFieldResolver;\n        const result = resolveFn(rootValue, args, contextValue, info);\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(result)) {\n            return result.then(assertEventStream).then(undefined, error => {\n                throw (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(error, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(path));\n            });\n        }\n        return assertEventStream(result);\n    }\n    catch (error) {\n        throw (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(error, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(path));\n    }\n}\nfunction assertEventStream(result) {\n    if (result instanceof Error) {\n        throw result;\n    }\n    // Assert field returned an event stream, otherwise yield an error.\n    if (!(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_18__.isAsyncIterable)(result)) {\n        throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.createGraphQLError)('Subscription field must return Async Iterable. ' + `Received: ${(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_14__.inspect)(result)}.`);\n    }\n    return result;\n}\nfunction executeDeferredFragment(exeContext, parentType, sourceValue, fields, label, path, parentContext) {\n    const asyncPayloadRecord = new DeferredFragmentRecord({\n        label,\n        path,\n        parentContext,\n        exeContext,\n    });\n    let promiseOrData;\n    try {\n        promiseOrData = executeFields(exeContext, parentType, sourceValue, path, fields, asyncPayloadRecord);\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(promiseOrData)) {\n            promiseOrData = promiseOrData.then(null, e => {\n                asyncPayloadRecord.errors.push(e);\n                return null;\n            });\n        }\n    }\n    catch (e) {\n        asyncPayloadRecord.errors.push(e);\n        promiseOrData = null;\n    }\n    asyncPayloadRecord.addData(promiseOrData);\n}\nfunction executeStreamField(path, itemPath, item, exeContext, fieldNodes, info, itemType, label, parentContext) {\n    const asyncPayloadRecord = new StreamRecord({\n        label,\n        path: itemPath,\n        parentContext,\n        exeContext,\n    });\n    let completedItem;\n    try {\n        try {\n            if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(item)) {\n                completedItem = item.then(resolved => completeValue(exeContext, itemType, fieldNodes, info, itemPath, resolved, asyncPayloadRecord));\n            }\n            else {\n                completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n            }\n            if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(completedItem)) {\n                // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n                // to take a second callback for the error case.\n                completedItem = completedItem.then(undefined, rawError => {\n                    const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(itemPath));\n                    const handledError = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n                    filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                    return handledError;\n                });\n            }\n        }\n        catch (rawError) {\n            const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(itemPath));\n            completedItem = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n            filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        }\n    }\n    catch (error) {\n        asyncPayloadRecord.errors.push(error);\n        filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n        asyncPayloadRecord.addItems(null);\n        return asyncPayloadRecord;\n    }\n    let completedItems;\n    if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(completedItem)) {\n        completedItems = completedItem.then(value => [value], error => {\n            asyncPayloadRecord.errors.push(error);\n            filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n            return null;\n        });\n    }\n    else {\n        completedItems = [completedItem];\n    }\n    asyncPayloadRecord.addItems(completedItems);\n    return asyncPayloadRecord;\n}\nasync function executeStreamIteratorItem(iterator, exeContext, fieldNodes, info, itemType, asyncPayloadRecord, itemPath) {\n    let item;\n    try {\n        const { value, done } = await iterator.next();\n        if (done) {\n            asyncPayloadRecord.setIsCompletedIterator();\n            return { done, value: undefined };\n        }\n        item = value;\n    }\n    catch (rawError) {\n        const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(itemPath));\n        const value = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n        // don't continue if iterator throws\n        return { done: true, value };\n    }\n    let completedItem;\n    try {\n        completedItem = completeValue(exeContext, itemType, fieldNodes, info, itemPath, item, asyncPayloadRecord);\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(completedItem)) {\n            completedItem = completedItem.then(undefined, rawError => {\n                const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(itemPath));\n                const handledError = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n                filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n                return handledError;\n            });\n        }\n        return { done: false, value: completedItem };\n    }\n    catch (rawError) {\n        const error = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.locatedError)(rawError, fieldNodes, (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(itemPath));\n        const value = handleFieldError(error, itemType, asyncPayloadRecord.errors);\n        filterSubsequentPayloads(exeContext, itemPath, asyncPayloadRecord);\n        return { done: false, value };\n    }\n}\nasync function executeStreamIterator(initialIndex, iterator, exeContext, fieldNodes, info, itemType, path, label, parentContext) {\n    let index = initialIndex;\n    let previousAsyncPayloadRecord = parentContext !== null && parentContext !== void 0 ? parentContext : undefined;\n    while (true) {\n        const itemPath = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.addPath)(path, index, undefined);\n        const asyncPayloadRecord = new StreamRecord({\n            label,\n            path: itemPath,\n            parentContext: previousAsyncPayloadRecord,\n            iterator,\n            exeContext,\n        });\n        let iteration;\n        try {\n            iteration = await executeStreamIteratorItem(iterator, exeContext, fieldNodes, info, itemType, asyncPayloadRecord, itemPath);\n        }\n        catch (error) {\n            asyncPayloadRecord.errors.push(error);\n            filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n            asyncPayloadRecord.addItems(null);\n            // entire stream has errored and bubbled upwards\n            if (iterator === null || iterator === void 0 ? void 0 : iterator.return) {\n                iterator.return().catch(() => {\n                    // ignore errors\n                });\n            }\n            return;\n        }\n        const { done, value: completedItem } = iteration;\n        let completedItems;\n        if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.isPromise)(completedItem)) {\n            completedItems = completedItem.then(value => [value], error => {\n                asyncPayloadRecord.errors.push(error);\n                filterSubsequentPayloads(exeContext, path, asyncPayloadRecord);\n                return null;\n            });\n        }\n        else {\n            completedItems = [completedItem];\n        }\n        asyncPayloadRecord.addItems(completedItems);\n        if (done) {\n            break;\n        }\n        previousAsyncPayloadRecord = asyncPayloadRecord;\n        index++;\n    }\n}\nfunction filterSubsequentPayloads(exeContext, nullPath, currentAsyncRecord) {\n    const nullPathArray = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(nullPath);\n    exeContext.subsequentPayloads.forEach(asyncRecord => {\n        var _a;\n        if (asyncRecord === currentAsyncRecord) {\n            // don't remove payload from where error originates\n            return;\n        }\n        for (let i = 0; i < nullPathArray.length; i++) {\n            if (asyncRecord.path[i] !== nullPathArray[i]) {\n                // asyncRecord points to a path unaffected by this payload\n                return;\n            }\n        }\n        // asyncRecord path points to nulled error field\n        if (isStreamPayload(asyncRecord) && ((_a = asyncRecord.iterator) === null || _a === void 0 ? void 0 : _a.return)) {\n            asyncRecord.iterator.return().catch(() => {\n                // ignore error\n            });\n        }\n        exeContext.subsequentPayloads.delete(asyncRecord);\n    });\n}\nfunction getCompletedIncrementalResults(exeContext) {\n    const incrementalResults = [];\n    for (const asyncPayloadRecord of exeContext.subsequentPayloads) {\n        const incrementalResult = {};\n        if (!asyncPayloadRecord.isCompleted) {\n            continue;\n        }\n        exeContext.subsequentPayloads.delete(asyncPayloadRecord);\n        if (isStreamPayload(asyncPayloadRecord)) {\n            const items = asyncPayloadRecord.items;\n            if (asyncPayloadRecord.isCompletedIterator) {\n                // async iterable resolver just finished but there may be pending payloads\n                continue;\n            }\n            incrementalResult.items = items;\n        }\n        else {\n            const data = asyncPayloadRecord.data;\n            incrementalResult.data = data !== null && data !== void 0 ? data : null;\n        }\n        incrementalResult.path = asyncPayloadRecord.path;\n        if (asyncPayloadRecord.label) {\n            incrementalResult.label = asyncPayloadRecord.label;\n        }\n        if (asyncPayloadRecord.errors.length > 0) {\n            incrementalResult.errors = asyncPayloadRecord.errors;\n        }\n        incrementalResults.push(incrementalResult);\n    }\n    return incrementalResults;\n}\nfunction yieldSubsequentPayloads(exeContext) {\n    let isDone = false;\n    async function next() {\n        if (isDone) {\n            return { value: undefined, done: true };\n        }\n        await Promise.race(Array.from(exeContext.subsequentPayloads).map(p => p.promise));\n        if (isDone) {\n            // a different call to next has exhausted all payloads\n            return { value: undefined, done: true };\n        }\n        const incremental = getCompletedIncrementalResults(exeContext);\n        const hasNext = exeContext.subsequentPayloads.size > 0;\n        if (!incremental.length && hasNext) {\n            return next();\n        }\n        if (!hasNext) {\n            isDone = true;\n        }\n        return {\n            value: incremental.length ? { incremental, hasNext } : { hasNext },\n            done: false,\n        };\n    }\n    function returnStreamIterators() {\n        const promises = [];\n        exeContext.subsequentPayloads.forEach(asyncPayloadRecord => {\n            var _a;\n            if (isStreamPayload(asyncPayloadRecord) && ((_a = asyncPayloadRecord.iterator) === null || _a === void 0 ? void 0 : _a.return)) {\n                promises.push(asyncPayloadRecord.iterator.return());\n            }\n        });\n        return Promise.all(promises);\n    }\n    return {\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n        next,\n        async return() {\n            await returnStreamIterators();\n            isDone = true;\n            return { value: undefined, done: true };\n        },\n        async throw(error) {\n            await returnStreamIterators();\n            isDone = true;\n            return Promise.reject(error);\n        },\n    };\n}\nclass DeferredFragmentRecord {\n    constructor(opts) {\n        this.type = 'defer';\n        this.label = opts.label;\n        this.path = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(opts.path);\n        this.parentContext = opts.parentContext;\n        this.errors = [];\n        this._exeContext = opts.exeContext;\n        this._exeContext.subsequentPayloads.add(this);\n        this.isCompleted = false;\n        this.data = null;\n        this.promise = new Promise(resolve => {\n            this._resolve = MaybePromise => {\n                resolve(MaybePromise);\n            };\n        }).then(data => {\n            this.data = data;\n            this.isCompleted = true;\n        });\n    }\n    addData(data) {\n        var _a, _b, _c;\n        const parentData = (_a = this.parentContext) === null || _a === void 0 ? void 0 : _a.promise;\n        if (parentData) {\n            (_b = this._resolve) === null || _b === void 0 ? void 0 : _b.call(this, parentData.then(() => data));\n            return;\n        }\n        (_c = this._resolve) === null || _c === void 0 ? void 0 : _c.call(this, data);\n    }\n}\nclass StreamRecord {\n    constructor(opts) {\n        this.type = 'stream';\n        this.items = null;\n        this.label = opts.label;\n        this.path = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.pathToArray)(opts.path);\n        this.parentContext = opts.parentContext;\n        this.iterator = opts.iterator;\n        this.errors = [];\n        this._exeContext = opts.exeContext;\n        this._exeContext.subsequentPayloads.add(this);\n        this.isCompleted = false;\n        this.items = null;\n        this.promise = new Promise(resolve => {\n            this._resolve = MaybePromise => {\n                resolve(MaybePromise);\n            };\n        }).then(items => {\n            this.items = items;\n            this.isCompleted = true;\n        });\n    }\n    addItems(items) {\n        var _a, _b, _c;\n        const parentData = (_a = this.parentContext) === null || _a === void 0 ? void 0 : _a.promise;\n        if (parentData) {\n            (_b = this._resolve) === null || _b === void 0 ? void 0 : _b.call(this, parentData.then(() => items));\n            return;\n        }\n        (_c = this._resolve) === null || _c === void 0 ? void 0 : _c.call(this, items);\n    }\n    setIsCompletedIterator() {\n        this.isCompletedIterator = true;\n    }\n}\nfunction isStreamPayload(asyncPayload) {\n    return asyncPayload.type === 'stream';\n}\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the three introspection fields,\n * __schema, __type and __typename. __typename is special because\n * it can always be queried as a field, even in situations where no\n * other fields are allowed, like on a Union. __schema and __type\n * could get automatically added to the query type, but that would\n * require mutating type definitions, which would cause issues.\n *\n * @internal\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n    const fieldName = fieldNode.name.value;\n    if (fieldName === graphql__WEBPACK_IMPORTED_MODULE_21__.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return graphql__WEBPACK_IMPORTED_MODULE_21__.SchemaMetaFieldDef;\n    }\n    else if (fieldName === graphql__WEBPACK_IMPORTED_MODULE_21__.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n        return graphql__WEBPACK_IMPORTED_MODULE_21__.TypeMetaFieldDef;\n    }\n    else if (fieldName === graphql__WEBPACK_IMPORTED_MODULE_21__.TypeNameMetaFieldDef.name) {\n        return graphql__WEBPACK_IMPORTED_MODULE_21__.TypeNameMetaFieldDef;\n    }\n    return parentType.getFields()[fieldName];\n}\nfunction isIncrementalResult(result) {\n    return 'incremental' in result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/execute.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/flattenAsyncIterable.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/flattenAsyncIterable.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flattenAsyncIterable: () => (/* binding */ flattenAsyncIterable)\n/* harmony export */ });\n/**\n * Given an AsyncIterable of AsyncIterables, flatten all yielded results into a\n * single AsyncIterable.\n */\nfunction flattenAsyncIterable(iterable) {\n    // You might think this whole function could be replaced with\n    //\n    //    async function* flattenAsyncIterable(iterable) {\n    //      for await (const subIterator of iterable) {\n    //        yield* subIterator;\n    //      }\n    //    }\n    //\n    // but calling `.return()` on the iterator it returns won't interrupt the `for await`.\n    const topIterator = iterable[Symbol.asyncIterator]();\n    let currentNestedIterator;\n    let waitForCurrentNestedIterator;\n    let done = false;\n    async function next() {\n        if (done) {\n            return { value: undefined, done: true };\n        }\n        try {\n            if (!currentNestedIterator) {\n                // Somebody else is getting it already.\n                if (waitForCurrentNestedIterator) {\n                    await waitForCurrentNestedIterator;\n                    return await next();\n                }\n                // Nobody else is getting it. We should!\n                let resolve;\n                waitForCurrentNestedIterator = new Promise(r => {\n                    resolve = r;\n                });\n                const topIteratorResult = await topIterator.next();\n                if (topIteratorResult.done) {\n                    // Given that done only ever transitions from false to true,\n                    // require-atomic-updates is being unnecessarily cautious.\n                    done = true;\n                    return await next();\n                }\n                // eslint is making a reasonable point here, but we've explicitly protected\n                // ourself from the race condition by ensuring that only the single call\n                // that assigns to waitForCurrentNestedIterator is allowed to assign to\n                // currentNestedIterator or waitForCurrentNestedIterator.\n                currentNestedIterator = topIteratorResult.value[Symbol.asyncIterator]();\n                waitForCurrentNestedIterator = undefined;\n                resolve();\n                return await next();\n            }\n            const rememberCurrentNestedIterator = currentNestedIterator;\n            const nestedIteratorResult = await currentNestedIterator.next();\n            if (!nestedIteratorResult.done) {\n                return nestedIteratorResult;\n            }\n            // The nested iterator is done. If it's still the current one, make it not\n            // current. (If it's not the current one, somebody else has made us move on.)\n            if (currentNestedIterator === rememberCurrentNestedIterator) {\n                currentNestedIterator = undefined;\n            }\n            return await next();\n        }\n        catch (err) {\n            done = true;\n            throw err;\n        }\n    }\n    return {\n        next,\n        async return() {\n            var _a, _b;\n            done = true;\n            await Promise.all([(_a = currentNestedIterator === null || currentNestedIterator === void 0 ? void 0 : currentNestedIterator.return) === null || _a === void 0 ? void 0 : _a.call(currentNestedIterator), (_b = topIterator.return) === null || _b === void 0 ? void 0 : _b.call(topIterator)]);\n            return { value: undefined, done: true };\n        },\n        async throw(error) {\n            var _a, _b;\n            done = true;\n            await Promise.all([(_a = currentNestedIterator === null || currentNestedIterator === void 0 ? void 0 : currentNestedIterator.throw) === null || _a === void 0 ? void 0 : _a.call(currentNestedIterator, error), (_b = topIterator.throw) === null || _b === void 0 ? void 0 : _b.call(topIterator, error)]);\n            /* c8 ignore next */\n            throw error;\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGdyYXBocWwtdG9vbHMrZXhlY3V0b3JAMC4wLjE4X2dyYXBocWxAMTYuMTAuMC9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvZXhlY3V0b3IvZXNtL2V4ZWN1dGlvbi9mbGF0dGVuQXN5bmNJdGVyYWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9hZDE5L0RvY3VtZW50cy9hbnNhcm0tZmlsZS1zZXJ2ZXIvbm9kZV9tb2R1bGVzLy5wbnBtL0BncmFwaHFsLXRvb2xzK2V4ZWN1dG9yQDAuMC4xOF9ncmFwaHFsQDE2LjEwLjAvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL2V4ZWN1dG9yL2VzbS9leGVjdXRpb24vZmxhdHRlbkFzeW5jSXRlcmFibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHaXZlbiBhbiBBc3luY0l0ZXJhYmxlIG9mIEFzeW5jSXRlcmFibGVzLCBmbGF0dGVuIGFsbCB5aWVsZGVkIHJlc3VsdHMgaW50byBhXG4gKiBzaW5nbGUgQXN5bmNJdGVyYWJsZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW5Bc3luY0l0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgLy8gWW91IG1pZ2h0IHRoaW5rIHRoaXMgd2hvbGUgZnVuY3Rpb24gY291bGQgYmUgcmVwbGFjZWQgd2l0aFxuICAgIC8vXG4gICAgLy8gICAgYXN5bmMgZnVuY3Rpb24qIGZsYXR0ZW5Bc3luY0l0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgLy8gICAgICBmb3IgYXdhaXQgKGNvbnN0IHN1Ykl0ZXJhdG9yIG9mIGl0ZXJhYmxlKSB7XG4gICAgLy8gICAgICAgIHlpZWxkKiBzdWJJdGVyYXRvcjtcbiAgICAvLyAgICAgIH1cbiAgICAvLyAgICB9XG4gICAgLy9cbiAgICAvLyBidXQgY2FsbGluZyBgLnJldHVybigpYCBvbiB0aGUgaXRlcmF0b3IgaXQgcmV0dXJucyB3b24ndCBpbnRlcnJ1cHQgdGhlIGBmb3IgYXdhaXRgLlxuICAgIGNvbnN0IHRvcEl0ZXJhdG9yID0gaXRlcmFibGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgbGV0IGN1cnJlbnROZXN0ZWRJdGVyYXRvcjtcbiAgICBsZXQgd2FpdEZvckN1cnJlbnROZXN0ZWRJdGVyYXRvcjtcbiAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgIGFzeW5jIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghY3VycmVudE5lc3RlZEl0ZXJhdG9yKSB7XG4gICAgICAgICAgICAgICAgLy8gU29tZWJvZHkgZWxzZSBpcyBnZXR0aW5nIGl0IGFscmVhZHkuXG4gICAgICAgICAgICAgICAgaWYgKHdhaXRGb3JDdXJyZW50TmVzdGVkSXRlcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgd2FpdEZvckN1cnJlbnROZXN0ZWRJdGVyYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IG5leHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gTm9ib2R5IGVsc2UgaXMgZ2V0dGluZyBpdC4gV2Ugc2hvdWxkIVxuICAgICAgICAgICAgICAgIGxldCByZXNvbHZlO1xuICAgICAgICAgICAgICAgIHdhaXRGb3JDdXJyZW50TmVzdGVkSXRlcmF0b3IgPSBuZXcgUHJvbWlzZShyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSA9IHI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9wSXRlcmF0b3JSZXN1bHQgPSBhd2FpdCB0b3BJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHRvcEl0ZXJhdG9yUmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2l2ZW4gdGhhdCBkb25lIG9ubHkgZXZlciB0cmFuc2l0aW9ucyBmcm9tIGZhbHNlIHRvIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcXVpcmUtYXRvbWljLXVwZGF0ZXMgaXMgYmVpbmcgdW5uZWNlc3NhcmlseSBjYXV0aW91cy5cbiAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBuZXh0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVzbGludCBpcyBtYWtpbmcgYSByZWFzb25hYmxlIHBvaW50IGhlcmUsIGJ1dCB3ZSd2ZSBleHBsaWNpdGx5IHByb3RlY3RlZFxuICAgICAgICAgICAgICAgIC8vIG91cnNlbGYgZnJvbSB0aGUgcmFjZSBjb25kaXRpb24gYnkgZW5zdXJpbmcgdGhhdCBvbmx5IHRoZSBzaW5nbGUgY2FsbFxuICAgICAgICAgICAgICAgIC8vIHRoYXQgYXNzaWducyB0byB3YWl0Rm9yQ3VycmVudE5lc3RlZEl0ZXJhdG9yIGlzIGFsbG93ZWQgdG8gYXNzaWduIHRvXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudE5lc3RlZEl0ZXJhdG9yIG9yIHdhaXRGb3JDdXJyZW50TmVzdGVkSXRlcmF0b3IuXG4gICAgICAgICAgICAgICAgY3VycmVudE5lc3RlZEl0ZXJhdG9yID0gdG9wSXRlcmF0b3JSZXN1bHQudmFsdWVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICAgICAgd2FpdEZvckN1cnJlbnROZXN0ZWRJdGVyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IG5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlbWVtYmVyQ3VycmVudE5lc3RlZEl0ZXJhdG9yID0gY3VycmVudE5lc3RlZEl0ZXJhdG9yO1xuICAgICAgICAgICAgY29uc3QgbmVzdGVkSXRlcmF0b3JSZXN1bHQgPSBhd2FpdCBjdXJyZW50TmVzdGVkSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgaWYgKCFuZXN0ZWRJdGVyYXRvclJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5lc3RlZEl0ZXJhdG9yUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIG5lc3RlZCBpdGVyYXRvciBpcyBkb25lLiBJZiBpdCdzIHN0aWxsIHRoZSBjdXJyZW50IG9uZSwgbWFrZSBpdCBub3RcbiAgICAgICAgICAgIC8vIGN1cnJlbnQuIChJZiBpdCdzIG5vdCB0aGUgY3VycmVudCBvbmUsIHNvbWVib2R5IGVsc2UgaGFzIG1hZGUgdXMgbW92ZSBvbi4pXG4gICAgICAgICAgICBpZiAoY3VycmVudE5lc3RlZEl0ZXJhdG9yID09PSByZW1lbWJlckN1cnJlbnROZXN0ZWRJdGVyYXRvcikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnROZXN0ZWRJdGVyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dCxcbiAgICAgICAgYXN5bmMgcmV0dXJuKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoWyhfYSA9IGN1cnJlbnROZXN0ZWRJdGVyYXRvciA9PT0gbnVsbCB8fCBjdXJyZW50TmVzdGVkSXRlcmF0b3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnJlbnROZXN0ZWRJdGVyYXRvci5yZXR1cm4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGN1cnJlbnROZXN0ZWRJdGVyYXRvciksIChfYiA9IHRvcEl0ZXJhdG9yLnJldHVybikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwodG9wSXRlcmF0b3IpXSk7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHRocm93KGVycm9yKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbKF9hID0gY3VycmVudE5lc3RlZEl0ZXJhdG9yID09PSBudWxsIHx8IGN1cnJlbnROZXN0ZWRJdGVyYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudE5lc3RlZEl0ZXJhdG9yLnRocm93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChjdXJyZW50TmVzdGVkSXRlcmF0b3IsIGVycm9yKSwgKF9iID0gdG9wSXRlcmF0b3IudGhyb3cpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKHRvcEl0ZXJhdG9yLCBlcnJvcildKTtcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSxcbiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/flattenAsyncIterable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/invariant.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/invariant.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invariant: () => (/* binding */ invariant)\n/* harmony export */ });\nfunction invariant(condition, message) {\n    if (!condition) {\n        throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGdyYXBocWwtdG9vbHMrZXhlY3V0b3JAMC4wLjE4X2dyYXBocWxAMTYuMTAuMC9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvZXhlY3V0b3IvZXNtL2V4ZWN1dGlvbi9pbnZhcmlhbnQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2FkMTkvRG9jdW1lbnRzL2Fuc2FybS1maWxlLXNlcnZlci9ub2RlX21vZHVsZXMvLnBucG0vQGdyYXBocWwtdG9vbHMrZXhlY3V0b3JAMC4wLjE4X2dyYXBocWxAMTYuMTAuMC9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvZXhlY3V0b3IvZXNtL2V4ZWN1dGlvbi9pbnZhcmlhbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSAhPSBudWxsID8gbWVzc2FnZSA6ICdVbmV4cGVjdGVkIGludmFyaWFudCB0cmlnZ2VyZWQuJyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/invariant.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/normalizedExecutor.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/normalizedExecutor.js ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizedExecutor: () => (/* binding */ normalizedExecutor)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/getOperationAST.mjs\");\n/* harmony import */ var _execute_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./execute.js */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/execute.js\");\n/* harmony import */ var value_or_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! value-or-promise */ \"(rsc)/./node_modules/.pnpm/value-or-promise@1.0.12/node_modules/value-or-promise/build/module/index.js\");\n\n\n\nfunction normalizedExecutor(args) {\n    const operationAST = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.getOperationAST)(args.document, args.operationName);\n    if (operationAST == null) {\n        throw new Error('Must provide an operation.');\n    }\n    if (operationAST.operation === 'subscription') {\n        return (0,_execute_js__WEBPACK_IMPORTED_MODULE_2__.subscribe)(args);\n    }\n    return new value_or_promise__WEBPACK_IMPORTED_MODULE_0__.ValueOrPromise(() => (0,_execute_js__WEBPACK_IMPORTED_MODULE_2__.execute)(args))\n        .then((result) => {\n        if ('initialResult' in result) {\n            return (0,_execute_js__WEBPACK_IMPORTED_MODULE_2__.flattenIncrementalResults)(result);\n        }\n        return result;\n    })\n        .resolve();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGdyYXBocWwtdG9vbHMrZXhlY3V0b3JAMC4wLjE4X2dyYXBocWxAMTYuMTAuMC9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvZXhlY3V0b3IvZXNtL2V4ZWN1dGlvbi9ub3JtYWxpemVkRXhlY3V0b3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwQztBQUNtQztBQUMzQjtBQUMzQztBQUNQLHlCQUF5Qix3REFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsc0RBQVM7QUFDeEI7QUFDQSxlQUFlLDREQUFjLE9BQU8sb0RBQU87QUFDM0M7QUFDQTtBQUNBLG1CQUFtQixzRUFBeUI7QUFDNUM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9hZDE5L0RvY3VtZW50cy9hbnNhcm0tZmlsZS1zZXJ2ZXIvbm9kZV9tb2R1bGVzLy5wbnBtL0BncmFwaHFsLXRvb2xzK2V4ZWN1dG9yQDAuMC4xOF9ncmFwaHFsQDE2LjEwLjAvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL2V4ZWN1dG9yL2VzbS9leGVjdXRpb24vbm9ybWFsaXplZEV4ZWN1dG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE9wZXJhdGlvbkFTVCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgZXhlY3V0ZSwgZmxhdHRlbkluY3JlbWVudGFsUmVzdWx0cywgc3Vic2NyaWJlIH0gZnJvbSAnLi9leGVjdXRlLmpzJztcbmltcG9ydCB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAndmFsdWUtb3ItcHJvbWlzZSc7XG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplZEV4ZWN1dG9yKGFyZ3MpIHtcbiAgICBjb25zdCBvcGVyYXRpb25BU1QgPSBnZXRPcGVyYXRpb25BU1QoYXJncy5kb2N1bWVudCwgYXJncy5vcGVyYXRpb25OYW1lKTtcbiAgICBpZiAob3BlcmF0aW9uQVNUID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNdXN0IHByb3ZpZGUgYW4gb3BlcmF0aW9uLicpO1xuICAgIH1cbiAgICBpZiAob3BlcmF0aW9uQVNULm9wZXJhdGlvbiA9PT0gJ3N1YnNjcmlwdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZShhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBWYWx1ZU9yUHJvbWlzZSgoKSA9PiBleGVjdXRlKGFyZ3MpKVxuICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmICgnaW5pdGlhbFJlc3VsdCcgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmxhdHRlbkluY3JlbWVudGFsUmVzdWx0cyhyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSlcbiAgICAgICAgLnJlc29sdmUoKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/normalizedExecutor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/promiseForObject.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/promiseForObject.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   promiseForObject: () => (/* binding */ promiseForObject)\n/* harmony export */ });\n/**\n * This function transforms a JS object `Record<string, Promise<T>>` into\n * a `Promise<Record<string, T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nasync function promiseForObject(object) {\n    const keys = Object.keys(object);\n    const values = Object.values(object);\n    const resolvedValues = await Promise.all(values);\n    const resolvedObject = Object.create(null);\n    for (let i = 0; i < keys.length; ++i) {\n        resolvedObject[keys[i]] = resolvedValues[i];\n    }\n    return resolvedObject;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGdyYXBocWwtdG9vbHMrZXhlY3V0b3JAMC4wLjE4X2dyYXBocWxAMTYuMTAuMC9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvZXhlY3V0b3IvZXNtL2V4ZWN1dGlvbi9wcm9taXNlRm9yT2JqZWN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9hZDE5L0RvY3VtZW50cy9hbnNhcm0tZmlsZS1zZXJ2ZXIvbm9kZV9tb2R1bGVzLy5wbnBtL0BncmFwaHFsLXRvb2xzK2V4ZWN1dG9yQDAuMC4xOF9ncmFwaHFsQDE2LjEwLjAvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL2V4ZWN1dG9yL2VzbS9leGVjdXRpb24vcHJvbWlzZUZvck9iamVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZnVuY3Rpb24gdHJhbnNmb3JtcyBhIEpTIG9iamVjdCBgUmVjb3JkPHN0cmluZywgUHJvbWlzZTxUPj5gIGludG9cbiAqIGEgYFByb21pc2U8UmVjb3JkPHN0cmluZywgVD4+YFxuICpcbiAqIFRoaXMgaXMgYWtpbiB0byBibHVlYmlyZCdzIGBQcm9taXNlLnByb3BzYCwgYnV0IGltcGxlbWVudGVkIG9ubHkgdXNpbmdcbiAqIGBQcm9taXNlLmFsbGAgc28gaXQgd2lsbCB3b3JrIHdpdGggYW55IGltcGxlbWVudGF0aW9uIG9mIEVTNiBwcm9taXNlcy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb21pc2VGb3JPYmplY3Qob2JqZWN0KSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gICAgY29uc3QgdmFsdWVzID0gT2JqZWN0LnZhbHVlcyhvYmplY3QpO1xuICAgIGNvbnN0IHJlc29sdmVkVmFsdWVzID0gYXdhaXQgUHJvbWlzZS5hbGwodmFsdWVzKTtcbiAgICBjb25zdCByZXNvbHZlZE9iamVjdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlc29sdmVkT2JqZWN0W2tleXNbaV1dID0gcmVzb2x2ZWRWYWx1ZXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZE9iamVjdDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/promiseForObject.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/values.js":
/*!****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/values.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVariableValues: () => (/* binding */ getVariableValues)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/typeFromAST.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/type/definition.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/valueFromAST.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/.pnpm/graphql@16.10.0/node_modules/graphql/utilities/coerceInputValue.mjs\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/errors.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/jsutils.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/inspect.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/.pnpm/@graphql-tools+utils@9.2.1_graphql@16.10.0/node_modules/@graphql-tools/utils/esm/Path.js\");\n\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\nfunction getVariableValues(schema, varDefNodes, inputs, options) {\n    const errors = [];\n    const maxErrors = options === null || options === void 0 ? void 0 : options.maxErrors;\n    try {\n        const coerced = coerceVariableValues(schema, varDefNodes, inputs, error => {\n            if (maxErrors != null && errors.length >= maxErrors) {\n                throw (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.createGraphQLError)('Too many errors processing variables, error limit reached. Execution aborted.');\n            }\n            errors.push(error);\n        });\n        if (errors.length === 0) {\n            return { coerced };\n        }\n    }\n    catch (error) {\n        errors.push(error);\n    }\n    // @ts-expect-error - We know that errors is an array of GraphQLError.\n    return { errors };\n}\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n    const coercedValues = {};\n    for (const varDefNode of varDefNodes) {\n        const varName = varDefNode.variable.name.value;\n        const varType = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.typeFromAST)(schema, varDefNode.type);\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInputType)(varType)) {\n            // Must use input types for variables. This should be caught during\n            // validation, however is checked again here for safety.\n            const varTypeStr = (0,graphql__WEBPACK_IMPORTED_MODULE_3__.print)(varDefNode.type);\n            onError((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.createGraphQLError)(`Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`, { nodes: varDefNode.type }));\n            continue;\n        }\n        if (!(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_4__.hasOwnProperty)(inputs, varName)) {\n            if (varDefNode.defaultValue) {\n                coercedValues[varName] = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.valueFromAST)(varDefNode.defaultValue, varType);\n            }\n            else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(varType)) {\n                const varTypeStr = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.inspect)(varType);\n                onError((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.createGraphQLError)(`Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`, {\n                    nodes: varDefNode,\n                }));\n            }\n            continue;\n        }\n        const value = inputs[varName];\n        if (value === null && (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isNonNullType)(varType)) {\n            const varTypeStr = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.inspect)(varType);\n            onError((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.createGraphQLError)(`Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`, {\n                nodes: varDefNode,\n            }));\n            continue;\n        }\n        coercedValues[varName] = (0,graphql__WEBPACK_IMPORTED_MODULE_7__.coerceInputValue)(value, varType, (path, invalidValue, error) => {\n            let prefix = `Variable \"$${varName}\" got invalid value ` + (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.inspect)(invalidValue);\n            if (path.length > 0) {\n                prefix += ` at \"${varName}${(0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_8__.printPathArray)(path)}\"`;\n            }\n            onError((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.createGraphQLError)(prefix + '; ' + error.message, {\n                nodes: varDefNode,\n                originalError: error.originalError,\n            }));\n        });\n    }\n    return coercedValues;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQGdyYXBocWwtdG9vbHMrZXhlY3V0b3JAMC4wLjE4X2dyYXBocWxAMTYuMTAuMC9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvZXhlY3V0b3IvZXNtL2V4ZWN1dGlvbi92YWx1ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUEwRztBQUNQO0FBQ25HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3RUFBa0I7QUFDeEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvREFBVztBQUNuQyxhQUFhLG9EQUFXO0FBQ3hCO0FBQ0E7QUFDQSwrQkFBK0IsOENBQUs7QUFDcEMsb0JBQW9CLHdFQUFrQixlQUFlLFFBQVEsNEJBQTRCLFdBQVcsNkNBQTZDLHdCQUF3QjtBQUN6SztBQUNBO0FBQ0EsYUFBYSxvRUFBYztBQUMzQjtBQUNBLHlDQUF5QyxxREFBWTtBQUNyRDtBQUNBLHFCQUFxQixzREFBYTtBQUNsQyxtQ0FBbUMsNkRBQU87QUFDMUMsd0JBQXdCLHdFQUFrQixlQUFlLFFBQVEsc0JBQXNCLFdBQVc7QUFDbEc7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsc0RBQWE7QUFDM0MsK0JBQStCLDZEQUFPO0FBQ3RDLG9CQUFvQix3RUFBa0IsZUFBZSxRQUFRLHNCQUFzQixXQUFXO0FBQzlGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxpQ0FBaUMseURBQWdCO0FBQ2pELHVDQUF1QyxRQUFRLHdCQUF3Qiw2REFBTztBQUM5RTtBQUNBLGtDQUFrQyxRQUFRLEVBQUUsb0VBQWMsT0FBTztBQUNqRTtBQUNBLG9CQUFvQix3RUFBa0IsYUFBYTtBQUNuRDtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2FkMTkvRG9jdW1lbnRzL2Fuc2FybS1maWxlLXNlcnZlci9ub2RlX21vZHVsZXMvLnBucG0vQGdyYXBocWwtdG9vbHMrZXhlY3V0b3JAMC4wLjE4X2dyYXBocWxAMTYuMTAuMC9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvZXhlY3V0b3IvZXNtL2V4ZWN1dGlvbi92YWx1ZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJpbnQsIGlzSW5wdXRUeXBlLCBpc05vbk51bGxUeXBlLCBjb2VyY2VJbnB1dFZhbHVlLCB0eXBlRnJvbUFTVCwgdmFsdWVGcm9tQVNULCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgY3JlYXRlR3JhcGhRTEVycm9yLCBoYXNPd25Qcm9wZXJ0eSwgaW5zcGVjdCwgcHJpbnRQYXRoQXJyYXkgfSBmcm9tICdAZ3JhcGhxbC10b29scy91dGlscyc7XG4vKipcbiAqIFByZXBhcmVzIGFuIG9iamVjdCBtYXAgb2YgdmFyaWFibGVWYWx1ZXMgb2YgdGhlIGNvcnJlY3QgdHlwZSBiYXNlZCBvbiB0aGVcbiAqIHByb3ZpZGVkIHZhcmlhYmxlIGRlZmluaXRpb25zIGFuZCBhcmJpdHJhcnkgaW5wdXQuIElmIHRoZSBpbnB1dCBjYW5ub3QgYmVcbiAqIHBhcnNlZCB0byBtYXRjaCB0aGUgdmFyaWFibGUgZGVmaW5pdGlvbnMsIGEgR3JhcGhRTEVycm9yIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIE5vdGU6IFRoZSByZXR1cm5lZCB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCB3aXRoIGEgcHJvdG90eXBlLCBzaW5jZSBpdCBpc1xuICogZXhwb3NlZCB0byB1c2VyIGNvZGUuIENhcmUgc2hvdWxkIGJlIHRha2VuIHRvIG5vdCBwdWxsIHZhbHVlcyBmcm9tIHRoZVxuICogT2JqZWN0IHByb3RvdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFZhcmlhYmxlVmFsdWVzKHNjaGVtYSwgdmFyRGVmTm9kZXMsIGlucHV0cywgb3B0aW9ucykge1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IG1heEVycm9ycyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYXhFcnJvcnM7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY29lcmNlZCA9IGNvZXJjZVZhcmlhYmxlVmFsdWVzKHNjaGVtYSwgdmFyRGVmTm9kZXMsIGlucHV0cywgZXJyb3IgPT4ge1xuICAgICAgICAgICAgaWYgKG1heEVycm9ycyAhPSBudWxsICYmIGVycm9ycy5sZW5ndGggPj0gbWF4RXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgY3JlYXRlR3JhcGhRTEVycm9yKCdUb28gbWFueSBlcnJvcnMgcHJvY2Vzc2luZyB2YXJpYWJsZXMsIGVycm9yIGxpbWl0IHJlYWNoZWQuIEV4ZWN1dGlvbiBhYm9ydGVkLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNvZXJjZWQgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIH1cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gV2Uga25vdyB0aGF0IGVycm9ycyBpcyBhbiBhcnJheSBvZiBHcmFwaFFMRXJyb3IuXG4gICAgcmV0dXJuIHsgZXJyb3JzIH07XG59XG5mdW5jdGlvbiBjb2VyY2VWYXJpYWJsZVZhbHVlcyhzY2hlbWEsIHZhckRlZk5vZGVzLCBpbnB1dHMsIG9uRXJyb3IpIHtcbiAgICBjb25zdCBjb2VyY2VkVmFsdWVzID0ge307XG4gICAgZm9yIChjb25zdCB2YXJEZWZOb2RlIG9mIHZhckRlZk5vZGVzKSB7XG4gICAgICAgIGNvbnN0IHZhck5hbWUgPSB2YXJEZWZOb2RlLnZhcmlhYmxlLm5hbWUudmFsdWU7XG4gICAgICAgIGNvbnN0IHZhclR5cGUgPSB0eXBlRnJvbUFTVChzY2hlbWEsIHZhckRlZk5vZGUudHlwZSk7XG4gICAgICAgIGlmICghaXNJbnB1dFR5cGUodmFyVHlwZSkpIHtcbiAgICAgICAgICAgIC8vIE11c3QgdXNlIGlucHV0IHR5cGVzIGZvciB2YXJpYWJsZXMuIFRoaXMgc2hvdWxkIGJlIGNhdWdodCBkdXJpbmdcbiAgICAgICAgICAgIC8vIHZhbGlkYXRpb24sIGhvd2V2ZXIgaXMgY2hlY2tlZCBhZ2FpbiBoZXJlIGZvciBzYWZldHkuXG4gICAgICAgICAgICBjb25zdCB2YXJUeXBlU3RyID0gcHJpbnQodmFyRGVmTm9kZS50eXBlKTtcbiAgICAgICAgICAgIG9uRXJyb3IoY3JlYXRlR3JhcGhRTEVycm9yKGBWYXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgZXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBcIiR7dmFyVHlwZVN0cn1cIiB3aGljaCBjYW5ub3QgYmUgdXNlZCBhcyBhbiBpbnB1dCB0eXBlLmAsIHsgbm9kZXM6IHZhckRlZk5vZGUudHlwZSB9KSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5KGlucHV0cywgdmFyTmFtZSkpIHtcbiAgICAgICAgICAgIGlmICh2YXJEZWZOb2RlLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvZXJjZWRWYWx1ZXNbdmFyTmFtZV0gPSB2YWx1ZUZyb21BU1QodmFyRGVmTm9kZS5kZWZhdWx0VmFsdWUsIHZhclR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOb25OdWxsVHlwZSh2YXJUeXBlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhclR5cGVTdHIgPSBpbnNwZWN0KHZhclR5cGUpO1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoY3JlYXRlR3JhcGhRTEVycm9yKGBWYXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgb2YgcmVxdWlyZWQgdHlwZSBcIiR7dmFyVHlwZVN0cn1cIiB3YXMgbm90IHByb3ZpZGVkLmAsIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXM6IHZhckRlZk5vZGUsXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSBpbnB1dHNbdmFyTmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCAmJiBpc05vbk51bGxUeXBlKHZhclR5cGUpKSB7XG4gICAgICAgICAgICBjb25zdCB2YXJUeXBlU3RyID0gaW5zcGVjdCh2YXJUeXBlKTtcbiAgICAgICAgICAgIG9uRXJyb3IoY3JlYXRlR3JhcGhRTEVycm9yKGBWYXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgb2Ygbm9uLW51bGwgdHlwZSBcIiR7dmFyVHlwZVN0cn1cIiBtdXN0IG5vdCBiZSBudWxsLmAsIHtcbiAgICAgICAgICAgICAgICBub2RlczogdmFyRGVmTm9kZSxcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvZXJjZWRWYWx1ZXNbdmFyTmFtZV0gPSBjb2VyY2VJbnB1dFZhbHVlKHZhbHVlLCB2YXJUeXBlLCAocGF0aCwgaW52YWxpZFZhbHVlLCBlcnJvcikgPT4ge1xuICAgICAgICAgICAgbGV0IHByZWZpeCA9IGBWYXJpYWJsZSBcIiQke3Zhck5hbWV9XCIgZ290IGludmFsaWQgdmFsdWUgYCArIGluc3BlY3QoaW52YWxpZFZhbHVlKTtcbiAgICAgICAgICAgIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBwcmVmaXggKz0gYCBhdCBcIiR7dmFyTmFtZX0ke3ByaW50UGF0aEFycmF5KHBhdGgpfVwiYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uRXJyb3IoY3JlYXRlR3JhcGhRTEVycm9yKHByZWZpeCArICc7ICcgKyBlcnJvci5tZXNzYWdlLCB7XG4gICAgICAgICAgICAgICAgbm9kZXM6IHZhckRlZk5vZGUsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3Iub3JpZ2luYWxFcnJvcixcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb2VyY2VkVmFsdWVzO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@graphql-tools+executor@0.0.18_graphql@16.10.0/node_modules/@graphql-tools/executor/esm/execution/values.js\n");

/***/ })

};
;